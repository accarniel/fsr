[{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://accarniel.github.io/fsr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"Copyright (C) 2021-2022 Anderson Chaves Carniel, Felippe Galdino Silva, Juliana Strieder Philippsen The fsr package is developed to handle fuzzy spatial data in R.  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. fsr Copyright (C) 2021-2022 Anderson Chaves Carniel, Felippe Galdino Silva, Juliana Philippsen This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://accarniel.github.io/fsr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anderson Carniel. Research team head, author, maintainer, copyright holder. Pedro Venâncio. Contributor. Markus Schneider. Research team head.","code":""},{"path":"https://accarniel.github.io/fsr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson Chaves Carniel, Pedro Vinícius Almeida Borges de Venâncio, Markus Schneider. 2023. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927. DOI:https://doi.org/10.1145/3474717.3484255 Anderson Chaves Carniel, Felippe Galdino, Juliana Strieder Philippsen, Markus Schneider. 2021. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL '21), pp. 526–535. DOI:https://doi.org/10.1145/3474717.3484255","code":"@Article{fsr23TGIS,   title = {{fsr}: An {R} package for fuzzy spatial data handling},   author = {Anderson C. Carniel and Pedro V. A. B. Venâncio and Markus Schneider},   journal = {Transactions in GIS},   year = {2023},   volume = {27},   number = {3},   pages = {900--927},   doi = {10.1111/tgis.13044}, } @InProceedings{fsr21SIGSPATIAL,   title = {Handling Fuzzy Spatial Data in {R} using the {fsr} Package},   author = {Anderson C. Carniel and Felippe Galdino and Juliana S. Philippsen and Markus Schneider},   booktitle = {ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems},   year = {2021},   pages = {526--535},   doi = {10.1145/3474717.3484255}, }"},{"path":[]},{"path":"https://accarniel.github.io/fsr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Handling Fuzzy Spatial Data","text":"Many spatial objects (.e., geographical objects) reality may inexact locations, vague boundaries, /blurred interiors, hence adequately represented well-known (crisp) spatial objects (e.g., objects available spatial libraries like GEOS GDAL). Fuzzy set theory fuzzy logic powerful approaches deal spatial fuzziness. Unfortunately, spatial fuzziness far found way spatial data science projects due lack complete implementations software packages can handle fuzzy spatial objects. Motivated lack support, fsr package following advantages: implementation fuzzy spatial data types, operations, predicates, including heterogeneous fuzzy spatial data types, based Spatial Plateau Algebra (SPA). offers construction fuzzy spatial objects spatial plateau objects real spatial datasets. families functions permit users conduct exploratory (spatial) data analysis issuing geometric operations topological predicates fuzzy spatial objects. allows design creation fuzzy spatial inference (FSI) models discover new findings fuzzy spatial objects. provides evaluation methods process different types spatial inference queries using FSI models.","code":""},{"path":"https://accarniel.github.io/fsr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Handling Fuzzy Spatial Data","text":"cite fsr publications use: Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (ACM SIGSPATIAL 2021), pp. 526-535, 2021.","code":""},{"path":"https://accarniel.github.io/fsr/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"Handling Fuzzy Spatial Data","text":"Install released version fsr CRAN : Install development version GitHub :","code":"install.packages(\"fsr\") # install.packages(\"devtools\") library(devtools) install_github(\"accarniel/fsr\")"},{"path":"https://accarniel.github.io/fsr/index.html","id":"contributing-and-contact","dir":"","previous_headings":"","what":"Contributing and Contact","title":"Handling Fuzzy Spatial Data","text":"project welcomes contributions. can contribute fsr making Issues Pull Requests GitHub Repository. Alternatively, can contact Anderson Carniel. Pull Request email sent, Anderson Carniel check soon possible.","code":""},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":null,"dir":"Reference","previous_headings":"","what":"Return PWKT representation of a spatial plateau object — PWKT","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"functions give Plateau Well-Known Text (PWKT) representation pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"","code":"spa_pwkt(pgo)  # S3 method for pgeometry format(x, ..., width = 30)  # S4 method for pgeometry show(object)  # S4 method for pgeometry as.character(x, ...)"},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"pgo pgeometry object type. x pgeometry object type. ... <dynamic-dots> Unused. width integer value indicates number characters printed. 0 NULL NA, print everything. object pgeometry object type.","code":""},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"character object (.e., string) textual representation given pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"functions return textual representation pgeometry object, combines Well-Known Text (WKT) representation crisp vector geometry objects formal definitions spatial plateau data types. (.e. PLATEAUPOINT, PLATEAULINE, PLATEAUREGION, PLATEAUCOMPOSITION, PLATEAUCOLLECTION).","code":""},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"formal definition PWKT given : Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions spatial plateau data types explained detail : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018. Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/PWKT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return PWKT representation of a spatial plateau object — PWKT","text":"","code":"pcomp1 <- create_component(\"MULTIPOINT(1 2, 3 2)\", 0.4) pcomp2 <- create_component(\"POINT(2 1)\", 0.3) ppoint <- create_pgeometry(list(pcomp1, pcomp2), \"PLATEAUPOINT\")  # using spa_pwkt() spa_pwkt(ppoint)  #> [1] \"PLATEAUPOINT ((POINT (2 1), 0.3), (MULTIPOINT ((1 2), (3 2)), 0.4))\" # using show() to display the content of ppoint ppoint #> [1] \"PLATEAUPOINT ((POINT (2 1), 0.3), (MULTIPOINT ((1 2), (3 2)), 0.4))\" # using format with width = 30 (default value) format(ppoint) #> [1] \"PLATEAUPOINT ((POINT (2 1),...\"  lcomp1 <- create_component(\"LINESTRING(1 2, 3 3, 3 4)\", 1) lcomp2 <- create_component(\"LINESTRING(0 0, 5 5)\", 0.5) pline <- create_pgeometry(list(lcomp1, lcomp2), \"PLATEAULINE\")  spa_pwkt(pline) #> [1] \"PLATEAULINE ((LINESTRING (0 0, 5 5), 0.5), (LINESTRING (1 2, 3 3, 3 4), 1))\"  rcomp1 <- create_component(\"POLYGON((40 40, 20 48, 48 35, 40 40))\", 0.8) rcomp2 <- create_component(\"POLYGON((10 0, 40 18, 10 20, 5 18, 10 0))\", 0.2) pregion <- create_pgeometry(list(rcomp1, rcomp2), \"PLATEAUREGION\")  spa_pwkt(pregion) #> [1] \"PLATEAUREGION ((POLYGON ((10 0, 40 18, 10 20, 5 18, 10 0)), 0.2), (POLYGON ((40 40, 20 48, 48 35, 40 40)), 0.8))\"  pcomposition <- create_pgeometry(list(ppoint, pline, pregion), \"PLATEAUCOMPOSITION\")  spa_pwkt(pcomposition) #> [1] \"PLATEAUCOMPOSITION (PLATEAUPOINT ((POINT (2 1), 0.3), (MULTIPOINT ((1 2), (3 2)), 0.4)), PLATEAULINE ((LINESTRING (0 0, 5 5), 0.5), (LINESTRING (1 2, 3 3, 3 4), 1)), PLATEAUREGION ((POLYGON ((10 0, 40 18, 10 20, 5 18, 10 0)), 0.2), (POLYGON ((40 40, 20 48, 48 35, 40 40)), 0.8)))\"  pcomp3 <- create_component(\"POINT(10 15)\", 0.3) ppoint2 <- create_pgeometry(list(pcomp3), \"PLATEAUPOINT\")  pcollection <- create_pgeometry(list(pcomposition, ppoint2), \"PLATEAUCOLLECTION\")  spa_pwkt(pcollection) #> [1] \"PLATEAUCOLLECTION (PLATEAUCOMPOSITION (PLATEAUPOINT ((POINT (2 1), 0.3), (MULTIPOINT ((1 2), (3 2)), 0.4)), PLATEAULINE ((LINESTRING (0 0, 5 5), 0.5), (LINESTRING (1 2, 3 3, 3 4), 1)), PLATEAUREGION ((POLYGON ((10 0, 40 18, 10 20, 5 18, 10 0)), 0.2), (POLYGON ((40 40, 20 48, 48 35, 40 40)), 0.8))), PLATEAUPOINT ((POINT (10 15), 0.3)))\""},{"path":"https://accarniel.github.io/fsr/reference/as_tibble.pgeometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","title":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","text":"functions convert pgeometry object tabular format, tibble data.frame object, components pgeometry object compose rows table.","code":""},{"path":"https://accarniel.github.io/fsr/reference/as_tibble.pgeometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","text":"","code":"# S3 method for pgeometry as_tibble(x, ...)  # S3 method for pgeometry as.data.frame(x, ...)"},{"path":"https://accarniel.github.io/fsr/reference/as_tibble.pgeometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","text":"x pgeometry object. ... <dynamic-dots> Unused.","code":""},{"path":"https://accarniel.github.io/fsr/reference/as_tibble.pgeometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","text":"tabular object (data.frame tibble) number rows corresponding number components pgeometry object given input two columns format (geometry, md).","code":""},{"path":"https://accarniel.github.io/fsr/reference/as_tibble.pgeometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","text":"functions S3 methods pgeometry. as_tibble() function converts pgeometry object tibble, data frame class tbl_df. allows us get internal components pgeometry object (.e., spatial features objects membership degrees) data frame two separate columns: () geometry (sfc object) (ii) md (membership degree). Therefore, row tibble represents component original pgeometry object. also possible call S3 method .data.frame() convert pgeometry object data.frame object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/as_tibble.pgeometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a pgeometry object into tabular data (data.frame or tibble) — as_tibble.pgeometry","text":"","code":"pcomp1 <- create_component(\"MULTIPOINT(1 2, 3 2)\", 0.4) pcomp2 <- create_component(\"POINT(2 1)\", 0.3) pcomp3 <- create_component(\"MULTIPOINT(5 1, 0 0)\", 1) ppoint <- create_pgeometry(list(pcomp1, pcomp2, pcomp3), \"PLATEAUPOINT\")  # Converting the pgeometry object into a tibble object ppoint_tibble <- as_tibble(ppoint) ppoint_tibble #> # A tibble: 3 × 2 #>                    geometry    md #>                  <GEOMETRY> <dbl> #> 1               POINT (2 1)   0.3 #> 2 MULTIPOINT ((1 2), (3 2))   0.4 #> 3 MULTIPOINT ((5 1), (0 0))   1    # Converting it into data.frame ppoint_df <- as.data.frame(ppoint) ppoint_df #>                    geometry  md #> 1               POINT (2 1) 0.3 #> 2 MULTIPOINT ((1 2), (3 2)) 0.4 #> 3 MULTIPOINT ((5 1), (0 0)) 1.0"},{"path":"https://accarniel.github.io/fsr/reference/component-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing a component of a spatial plateau object — component-class","title":"An S4 Class for representing a component of a spatial plateau object — component-class","text":"S4 Class representing component spatial plateau object","code":""},{"path":"https://accarniel.github.io/fsr/reference/component-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing a component of a spatial plateau object — component-class","text":"component object composed two attributes. first one crisp spatial object second one membership degree ]0, 1]  component.","code":""},{"path":"https://accarniel.github.io/fsr/reference/component-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing a component of a spatial plateau object — component-class","text":"obj sfg object. md membership degree component.","code":""},{"path":"https://accarniel.github.io/fsr/reference/component-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing a component of a spatial plateau object — component-class","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_empty_pgeometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty pgeometry object — create_empty_pgeometry","title":"Create an empty pgeometry object — create_empty_pgeometry","text":"create_empty_pgeometry() builds empty pgeometry object specific type.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_empty_pgeometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty pgeometry object — create_empty_pgeometry","text":"","code":"create_empty_pgeometry(type)"},{"path":"https://accarniel.github.io/fsr/reference/create_empty_pgeometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty pgeometry object — create_empty_pgeometry","text":"type character value indicating spatial plateau data type pgeometry object. can either \"PLATEAUPOINT\", \"PLATEAULINE\", \"PLATEAUREGION\", \"PLATEAUCOMPOSITION\" \"PLATEAUCOLLECTION\".","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_empty_pgeometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty pgeometry object — create_empty_pgeometry","text":"empty pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_empty_pgeometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an empty pgeometry object — create_empty_pgeometry","text":"create_empty_pgeometry() function creates new pgeometry object components. add new components object, use spa_add_component(). components added object must compatible type empty pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_empty_pgeometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty pgeometry object — create_empty_pgeometry","text":"","code":"# Creating an empty plateau point object empty_plateau_point <- create_empty_pgeometry(\"PLATEAUPOINT\") empty_plateau_point #> [1] \"PLATEAUPOINT EMPTY\"  # Creating an empty plateau line object empty_plateau_line <- create_empty_pgeometry(\"PLATEAULINE\") empty_plateau_line #> [1] \"PLATEAULINE EMPTY\"  # Creating an empty plateau region object empty_plateau_region <- create_empty_pgeometry(\"PLATEAUREGION\") empty_plateau_region #> [1] \"PLATEAUREGION EMPTY\"  # Creating an empty plateau composition object empty_plateau_composition <- create_empty_pgeometry(\"PLATEAUCOMPOSITION\") empty_plateau_composition #> [1] \"PLATEAUCOMPOSITION EMPTY\"  # Creating an empty plateau collection object empty_plateau_collection <- create_empty_pgeometry(\"PLATEAUCOLLECTION\") empty_plateau_collection #> [1] \"PLATEAUCOLLECTION EMPTY\""},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pgeometry object with components — create_pgeometry","title":"Create a pgeometry object with components — create_pgeometry","text":"create_pgeometry() creates pgeometry object data.frame tibble object, list components, list spatial plateau objects.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pgeometry object with components — create_pgeometry","text":"","code":"create_pgeometry(x, type, is_valid = TRUE)"},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pgeometry object with components — create_pgeometry","text":"x list component objects, list pgeometry objects data.frame/tibble object. PLATEAUPOINT, PLATEAULINE PLATEAUREGION, type component must components. type character value indicates type desired pgeometry object. either \"PLATEAUPOINT\", \"PLATEAULINE\", \"PLATEAUREGION\", \"PLATEAUCOMPOSITION\", \"PLATEAUCOLLECTION\". must compatible components given x parameter. is_valid Boolean value check whether user wants validate created spatial plateau object end. is_valid = TRUE, calls validObject() method.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pgeometry object with components — create_pgeometry","text":"pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a pgeometry object with components — create_pgeometry","text":"create_pgeometry() flexible function creates pgeometry object using values given x. object built using either list component objects, list pgeometry objects data.frame (tibble) object. data.frame tibble object given input, columns must following format: () first column sfc object, (ii) second columns consists membership degree respective object sfc column. default, function checks resulting spatial plateau object valid. , checks whether constraints defined Spatial Plateau Algebra satisfied. instance, components plateau point, plateau line, plateau region must adjacent disjoint unique membership degrees. sure component objects provided function satisfy constraints, can use is_valid = FALSE improve performance function.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a pgeometry object with components — create_pgeometry","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions spatial plateau data types explained detail : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018. Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/create_pgeometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pgeometry object with components — create_pgeometry","text":"","code":"library(sf)  # Creating some components pts <- rbind(c(0, 2), c(4, 2)) # Point components pcp1 <- create_component(st_multipoint(pts), 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7) lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8)  # Creating spatial plateau objects from lists of components pp <- create_pgeometry(list(pcp1, pcp2, pcp3), \"PLATEAUPOINT\") pl <- create_pgeometry(list(lcp1, lcp3, lcp4), \"PLATEAULINE\") pr <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\") pcm <- create_pgeometry(list(pcp1, pcp2, lcp1, lcp2, lcp3, rcp2), \"PLATEAUCOMPOSITION\")  # Creating a spatial plateau objects from a list of spatial plateau objects pcl <- create_pgeometry(list(pp, pr, pcm), \"PLATEAUCOLLECTION\")  # Converting pp into a tibble pp #> [1] \"PLATEAUPOINT ((MULTIPOINT ((0 2), (4 2)), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9))\" tibble_pp <- as_tibble(pp) tibble_pp #> # A tibble: 3 × 2 #>                       geometry    md #>                   <MULTIPOINT> <dbl> #> 1               ((0 2), (4 2))   0.3 #> 2        ((2 2), (2 4), (2 0))   0.5 #> 3 ((1 1), (3 1), (1 3), (3 3))   0.9  # Creating a spatial plateau point from the previous tibble equivalent_pp <- create_pgeometry(tibble_pp, \"PLATEAUPOINT\") equivalent_pp #> [1] \"PLATEAUPOINT ((MULTIPOINT ((0 2), (4 2)), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9))\""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the consequent to an FSI model — fsi_add_cs","title":"Add the consequent to an FSI model — fsi_add_cs","text":"fsi_add_cs() adds consequent fuzzy spatial inference (FSI) model. consists set membership functions labeled linguistic values.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the consequent to an FSI model — fsi_add_cs","text":"","code":"fsi_add_cs(fsi, lvar, lvals, mfs, bounds)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the consequent to an FSI model — fsi_add_cs","text":"fsi FSI model instantiated fsi_create() function. lvar character value represents linguistic variable consequent. lvals character vector contains linguistic values linguistic variable consequent. mfs vector membership functions (see examples ). bounds numeric vector represents lower upper bounds consequent domain.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the consequent to an FSI model — fsi_add_cs","text":"FSI model populated consequent.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add the consequent to an FSI model — fsi_add_cs","text":"fsi_add_cs() function adds consequent FSI model. linguistic value defined lvals corresponding membership function defined mfs. Thus, two parameters must length. instance, first value lvals defines linguistic value first membership function mfs. bounds, lower upper values correspond first second parameter, respectively.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add the consequent to an FSI model — fsi_add_cs","text":"Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts formal definitions FSI models introduced : Carniel, . C.; Schneider, M. Fuzzy inference fuzzy spatial objects (FIFUS) spatial decision support systems. Proceedings 2017 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2017), pp. 1-6, 2017.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_cs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the consequent to an FSI model — fsi_add_cs","text":"","code":"# Defining two different types of membership functions trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  trim_mf <- function(a, b, c) {   function(x) {     pmax(pmin((x - a)/(b - a), (c - x)/(c - b), na.rm = TRUE), 0)   } }  # Creating the FSI model fsi <- fsi_create(\"To visit or not to visit, that is the question\",                     default_conseq = trim_mf(10, 30, 60))  # Creating the vector with the linguistic values of the linguistic variable \"visiting experience\" lvals_visiting_exp <- c(\"awful\", \"average\", \"great\")  # Defining the membership function for each linguistic value awful_mf <- trim_mf(0, 0, 20) average_mf <- trim_mf(10, 30, 60) great_mf <- trap_mf(40, 80, 100, 100)  # Adding the consequent to the FSI model fsi <- fsi_add_cs(fsi, \"visiting experience\", lvals_visiting_exp,                   c(awful_mf, average_mf, great_mf), c(0, 100))"},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an antecedent to an FSI model — fsi_add_fsa","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"fsi_add_fsa() adds fuzzy spatial antecedent fuzzy spatial inference (FSI) model. fuzzy spatial antecedent corresponds layer fuzzy spatial objects (.e., spatial plateau objects) describe different characteristics problem. antecedent linguistic variable fuzzy spatial objects linguistic values used part fuzzy rules.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"","code":"fsi_add_fsa(fsi, lvar, tbl)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"fsi FSI model instantiated fsi_create() function. lvar character value represents linguistic variable antecedent. tbl tibble spatial plateau objects annotated linguistic values linguistic variable specified lvar parameter.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"FSI model populated fuzzy spatial antecedent.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"fsi_add_fsa() function adds fuzzy spatial antecedent composed linguistic variable corresponding pgeometry objects annotated linguistic values. format tbl output function spa_creator(), allowing users directly provide plateau region objects input designing FSI models.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts formal definitions FSI models introduced : Carniel, . C.; Schneider, M. Fuzzy inference fuzzy spatial objects (FIFUS) spatial decision support systems. Proceedings 2017 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2017), pp. 1-6, 2017.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_fsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an antecedent to an FSI model — fsi_add_fsa","text":"","code":"library(tibble)  trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  trim_mf <- function(a, b, c) {   function(x) {     pmax(pmin((x - a)/(b - a), (c - x)/(c - b), na.rm = TRUE), 0)   } }  # Creating spatial plateau objects for the linguistic variable \"accommodation price\" lvals_accom_price <- c(\"cut-rate\", \"affordable\", \"expensive\") cut_rate_mf <- trap_mf(0, 0, 10, 48) affordable_mf <- trap_mf(10, 48, 80, 115) expensive_mf <- trap_mf(80, 115, 10000, 10000)  # Example of point dataset accom_price <- tibble(longitude = c(-74.0, -74.0, -74.0),                        latitude = c(40.8, 40.75, 40.7),                       price = c(150, 76, 60))   accom_price_layer <- spa_creator(accom_price, classes = lvals_accom_price,                           mfs = c(cut_rate_mf, affordable_mf, expensive_mf))                           # Creating the FSI model fsi <- fsi_create(\"To visit or not to visit, that is the question\",                    default_conseq = trim_mf(10, 30, 60))  # Adding the fuzzy spatial antecedent to the FSI model fsi <- fsi_add_fsa(fsi, \"accommodation price\", accom_price_layer)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"Add fuzzy rules to an FSI model — fsi_add_rules","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"fsi_add_rules() adds fuzzy rules set fuzzy spatial inference (FSI) model. fuzzy rule must contain linguistic variables values included antecedent parts consequent.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"","code":"fsi_add_rules(fsi, rules, weights = rep(1, length(rules)))"},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"fsi FSI model instantiated fsi_create() function. rules character vector containing rules defined user. follows specific format, detailed . weights numeric vector weight values rule. Default values 1.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"FSI model populated fuzzy rules set.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"fsi_add_rules() function adds fuzzy rules FSI model. definition fuzzy rule user-friendly since users can write using linguistic variables linguistic values previously defined added FSI model (via fsi_add_fsa() fsi_add_cs()). fuzzy rule format B, called antecedent B consequent rule implies B. , B statements combine fuzzy propositions using logical connectives like . fuzzy proposition format LVar LVal LVal linguistic value scope linguistic variable LVar. avoid possible contradictions keep mind following items specifying rules: order statements antecedent relevant. linguistic variable appear one time fuzzy rule. one kind logical connective (.e., ) must used statements antecedent.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts formal definitions FSI models introduced : Carniel, . C.; Schneider, M. Fuzzy inference fuzzy spatial objects (FIFUS) spatial decision support systems. Proceedings 2017 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2017), pp. 1-6, 2017.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_add_rules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add fuzzy rules to an FSI model — fsi_add_rules","text":"","code":"# Creating the FSI model from an example fsi <- visitation()  # Creating a vector of fuzzy rules ## note that we make use of the linguistic variables and linguistic values previously defined rules <- c(  \"IF accommodation review is reasonable AND      food safety is low    THEN visiting experience is awful\",  \"IF accommodation price is expensive AND      accommodation review is reasonable    THEN visiting experience is awful\",  \"IF accommodation price is affordable AND      accommodation review is good AND      food safety is medium    THEN visiting experience is average\",  \"IF accommodation price is affordable AND      accommodation review is excellent AND      food safety is high    THEN visiting experience is great\",  \"IF accommodation price is cut-rate AND      accommodation review is excellent AND      food safety is high    THEN visiting experience is great\")  # Adding these rules to the FSI model previously instantiated fsi <- fsi_add_rules(fsi, rules)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty fuzzy spatial inference model — fsi_create","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"fsi_create() builds fuzzy spatial inference (FSI) model without elements data source component (.e., spatial plateau objects, fuzzy rules set, fuzzy sets).","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"","code":"fsi_create(name, and_method = \"min\", or_method = \"max\",            imp_method = \"min\", agg_method = \"max\",             defuzz_method = \"centroid\", default_conseq = NULL)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"name character value specifies name FSI model. and_method character value defines operator logical connective . Default value \"min\". or_method character value defines operator logical connective . Default value \"max\". imp_method character value defines implication operator. Default value \"min\". agg_method character value defines aggregation operator. Default value \"max\". defuzz_method character value determines defuzzification technique. Default value centroid technique. default_conseq function object corresponds membership function consequent.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"empty named FSI model ready populated data source component (.e., spatial plateau objects, fuzzy rules set, fuzzy sets).","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"fsi_create() function creates empty FSI model default parameter values implement model using Mamdani's method. possible values parameters and_method imp_method : \"min\", \"prod\". name user-defined t-norm function can also informed . possible value parameters or_method agg_method : \"max\".  name user-defined t-conorm function can also informed . possible values parameter defuzz_method \"centroid\" (default value), \"bisector\", \"mom\", \"som\", \"lom\". parameter default_conseq defines default behavior FSI model fuzzy rule degree fulfillment greater 0 returned FSI model. creating empty FSI model, call functions fsi_add_fsa(), fsi_add_cs(), fsi_add_rules() fulfill FSI model needed information performing inferences.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts formal definitions FSI models introduced : Carniel, . C.; Schneider, M. Fuzzy inference fuzzy spatial objects (FIFUS) spatial decision support systems. Proceedings 2017 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2017), pp. 1-6, 2017.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty fuzzy spatial inference model — fsi_create","text":"","code":"trim_mf <- function(a, b, c) {   function(x) {     pmax(pmin((x - a)/(b - a), (c - x)/(c - b), na.rm = TRUE), 0)   } }  # Creating the FSI model fsi <- fsi_create(\"To visit or not to visit, that is the question\",                    default_conseq = trim_mf(10, 30, 60))"},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a point inference query — fsi_eval","title":"Evaluate a point inference query — fsi_eval","text":"fsi_eval() evaluates point inference query. Considering FSI model, answers following question: inferred value given single point location?","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a point inference query — fsi_eval","text":"","code":"fsi_eval(fsi, point, ...)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a point inference query — fsi_eval","text":"fsi FSI model built fsi_create() populated fsi_add_fsa(), fsi_add_cs(), fsi_add_rules(). point sfg object type POINT. ... <dynamic-dots> Informs fsi_eval elements resulting fuzzy set discretized user want default configuration (see ). Default values: discret_by 0.5 discret_length NULL.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a point inference query — fsi_eval","text":"numeric value belongs domain consequent FSI model represents result point inference query","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a point inference query — fsi_eval","text":"fsi_eval() function evaluates point inference query using FSI model populated fuzzy spatial antecedent, consequent, fuzzy rules set. evaluation based algorithm specified references . default behavior fsi_eval() parameter ... consider discrete interval values increment 0.5 lower upper values consequent domain (.e., defined fsi_add_cs() parameter bounds). user can modify default behavior using one following two ways: define value parameter discret_by changing incremental value. define desired length sequence values domain consequent using parameter discret_length.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate a point inference query — fsi_eval","text":"Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts definitions evaluation point inference queries introduced : Carniel, . C.; Galdino, F.; Schneider, M. Evaluating Region Inference Methods Using Fuzzy Spatial Inference Models. Proceedings 2022 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2022), pp. 1-8, 2022. Carniel, . C.; Schneider, M. Fuzzy inference fuzzy spatial objects (FIFUS) spatial decision support systems. Proceedings 2017 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2017), pp. 1-6, 2017.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a point inference query — fsi_eval","text":"","code":"library(sf)  # Creating the FSI model from an example fsi <- visitation()  # Creating a vector of fuzzy rules ## note that we make use of the linguistic variables and linguistic values previously defined rules <- c(  \"IF accommodation review is reasonable AND      food safety is low    THEN visiting experience is awful\",  \"IF accommodation price is expensive AND      accommodation review is reasonable    THEN visiting experience is awful\",  \"IF accommodation price is affordable AND      accommodation review is good AND      food safety is medium    THEN visiting experience is average\",  \"IF accommodation price is affordable AND      accommodation review is excellent AND      food safety is high    THEN visiting experience is great\",  \"IF accommodation price is cut-rate AND      accommodation review is excellent AND      food safety is high    THEN visiting experience is great\")  # Adding these rules to the FSI model previously instantiated fsi <- fsi_add_rules(fsi, rules)  # Evaluating a point inference query fsi_eval(fsi, st_point(c(-74.0, 40.7))) #> [1] 50 if (FALSE) { # Changing the default discretization fsi_eval(fsi, st_point(c(-74.0, 40.7)), discret_by = 0.8) fsi_eval(fsi, st_point(c(-74.0, 40.7)), discret_length = 200) }"},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate region inference methods — fsi_qw_eval","title":"Evaluate region inference methods — fsi_qw_eval","text":"fsi_qw_eval() implements two methods evaluating region inference (RI) queries: () Linguistic value-based RI query, (ii) Optimal RI query. objective queries capture points intersect search object (e.g., query window) whose inferred values fulfill specific user requirements (e.g., points maximum minimum inferred values).","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate region inference methods — fsi_qw_eval","text":"","code":"fsi_qw_eval(fsi, qw, approach = \"discretization\", ...)"},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate region inference methods — fsi_qw_eval","text":"fsi FSI model built fsi_create() function populated functions fsi_add_fsa(), fsi_add_cs(), fsi_add_rules(). qw sfg object representing search object (e.g., query window). axis-aligned rectangle represented simple polygon object 5 points (since last coordinate pair closes external ring rectangle). approach Defines approach employed perform region inference: \"discretization\" \"pso\". Default value \"discretization\". ... <dynamic-dots> Different set parameters required depending chosen approach (see details ).","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate region inference methods — fsi_qw_eval","text":"tibble format (points, inferred_values), points sfc object inferred_values inferred values domain consequent FSI model.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate region inference methods — fsi_qw_eval","text":"fsi_qw_eval() function evaluates two types RI queries: Linguistic value-based RI query, answers following type question: points intersect given search object inferred values belong target linguistic value? Optimal RI query, answers following type question: points intersect given search object maximum (minimum) inferred values? fsi_qw_eval() offers two different methods answer questions: () discretization method, (ii) optimization method. Comparative analyses (see reference ) indicate discretization method employed process linguistic value-based RI queries, optimization method adequate processing optimal RI queries. details describe use methods. discretization method, two additional parameters needed must informed using three-dots parameter ...: target_lval: character value indicates target linguistic value linguistic variable consequent. k: numeric value defines number points captured query window evaluated fsi_eval(). square root integer value. Alternatively, can inform number columns rows regular grid created query window informing numeric values n_col n_row, respectively. Thus, parameters can given instead number k. optimization method employs particle swarm optimization (PSO) algorithm. Thus, parameter approach = \"pso\" must set together following parameters: : character value defines user's goal, can either maximize minimize inferred values. Thus, parameter can either \"max\" \"min\". default value \"max\". max_depth: numeric value refers number times query window divided subquadrants. default value equal 2. instance, max_depth = 2 means query window split four subquadrants, PSO applied one search space. addition, PSO algorithm set parameters: maxit: numeric value defines maximum number iterations. Default value 50. population: numeric value defines number particles. Default value 10.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate region inference methods — fsi_qw_eval","text":"Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts definitions evaluation region inference methods explained : Carniel, . C.; Galdino, F.; Schneider, M. Evaluating Region Inference Methods Using Fuzzy Spatial Inference Models. Proceedings 2022 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2022), pp. 1-8, 2022.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsi_qw_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate region inference methods — fsi_qw_eval","text":"","code":"library(sf)  # Creating the FSI model from an example fsi <- visitation()  # Creating a vector of fuzzy rules ## note that we make use of the linguistic variables and linguistic values previously defined rules <- c(  \"IF accommodation review is reasonable AND      food safety is low    THEN visiting experience is awful\",  \"IF accommodation price is expensive AND      accommodation review is reasonable    THEN visiting experience is awful\",  \"IF accommodation price is affordable AND      accommodation review is good AND      food safety is medium    THEN visiting experience is average\",  \"IF accommodation price is affordable AND      accommodation review is excellent AND      food safety is high    THEN visiting experience is great\",  \"IF accommodation price is cut-rate AND      accommodation review is excellent AND      food safety is high    THEN visiting experience is great\")  # Adding these rules to the FSI model previously instantiated fsi <- fsi_add_rules(fsi, rules)  # Defining the query window pts_qw1 <- rbind(c(-73.92, 40.68527), c(-73.75, 40.68527),                   c(-73.75, 40.75), c(-73.92, 40.75), c(-73.92, 40.68527)) qw1 <- st_polygon(list(pts_qw1))  # Recall that our running example is based on a small set of point datasets # This means that inferred values will likely be the same  if (FALSE) { # Example using the discretization method fsi_qw_eval(fsi, qw1, approach = \"discretization\", target_lval = \"great\", k = 25)  # Example using the optimization method fsi_qw_eval(fsi, qw1, approach = \"pso\", max_depth = 2) }"},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a component — fsr_components","title":"Create a component — fsr_components","text":"create_component() builds object class component. component consists crisp spatial object (sfg object) labeled membership degree ]0, 1]. flexible function since crisp spatial object can provided using different formats.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a component — fsr_components","text":"","code":"create_component(obj, md, ...)  component_from_sfg(sfg, md)"},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a component — fsr_components","text":"obj crisp spatial object specific format (see details ). md numeric value indicating membership degree component. must value ]0, 1]. ... <dynamic-dots> Different parameters used convert crisp spatial object specific representation (see details ). sfg sfg object. either type POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON MULTIPOLYGON. types spatial objects allowed.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a component — fsr_components","text":"component object can added spatial plateau object (.e., pgeometry object).","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a component — fsr_components","text":"create_component() function creates component object. Internally, pair sfg object membership degree ]0, 1]. obj can either (see restrictions regarding data type ): sfg object. character vector containing WKT representation crisp spatial object. structure class \"WKB\" WKB EWKB representation crisp spatial object. EWKB representation used, provide additional parameter EWKB = TRUE .... vector, list, matrix containing coordinate pairs used creating sfg object. means similar behavior family functions st sf package (e.g., st_point(), st_multipoint(), etc.). Thus, provide additional parameter type ..., either \"POINT\", \"LINE\", \"REGION\". important emphasize crisp spatial object must simple complex point, line, region (.e., polygon) object. , POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON MULTIPOLYGON object. types crisp spatial objects given, error thrown. component_from_sfg() function deprecated.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a component — fsr_components","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a component — fsr_components","text":"","code":"# first way: providing sfg objects library(sf)  pts <- rbind(c(1, 2), c(3, 2)) comp1 <- create_component(st_multipoint(pts), 0.2)   lpts <- rbind(c(2, 2), c(3, 3)) comp2 <- create_component(st_linestring(lpts), 0.1)   matrix_obj <- matrix(c(1,1,8,1,8,8,1,8,1,1), ncol = 2, byrow = TRUE) rpts <- list(matrix_obj) comp3 <- create_component(st_polygon(rpts), 0.4)  # second way: providing WKT representations comp4 <- create_component(\"POINT(10 35)\", 0.5) comp5 <- create_component(\"MULTILINESTRING((-29 -27, -36 -31, -45 -33), (-45 -33, -46 -32))\", 0.9) comp6 <- create_component(\"POLYGON((75 29, 77 29, 77 29, 75 29))\", 1)  # third way: providing WKB representations wkb = structure(list(\"0x0101000020e610000000000000000000000000000000000040\"), class = \"WKB\") comp7 <- create_component(wkb, 0.8, EWKB = TRUE)  # fourth way: providing coordinate pairs coords1 = rbind(c(2,2), c(3,3)) coords2 = rbind(c(1,1), c(3,2))  comp8 <- create_component(coords1, 0.45, type = \"LINE\") comp9 <- create_component(coords2, 0.32, type = \"POINT\")"},{"path":"https://accarniel.github.io/fsr/reference/fsr_diff_operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute fuzzy difference operators — fsr_diff_operators","title":"Compute fuzzy difference operators — fsr_diff_operators","text":"Fuzzy difference operations set operations generalize Boolean difference operations. family functions implements operators help us define different fuzzy difference operations. operators receive two numerical values [0, 1] input calculates another numerical value [0, 1] output.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_diff_operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute fuzzy difference operators — fsr_diff_operators","text":"","code":"f_diff(x, y)  f_bound_diff(x, y)  f_symm_diff(x, y)  f_abs_diff(x, y)"},{"path":"https://accarniel.github.io/fsr/reference/fsr_diff_operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute fuzzy difference operators — fsr_diff_operators","text":"x numerical vector whose values [0, 1]. y numerical vector whose values [0, 1].","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_diff_operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute fuzzy difference operators — fsr_diff_operators","text":"numerical vector.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_diff_operators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute fuzzy difference operators — fsr_diff_operators","text":"functions calculate resulting membership degree fuzzy difference operator applied two numerical values interval [0, 1]. following fuzzy difference operators available: f_diff(): standard fuzzy set difference operator defined intersection x complement y, , min(x, 1 - y). f_bound_diff(): fuzzy bounded difference operator defined x minus y upper bound equal 0, , max(0, x - y). f_symm_diff(): fuzzy symmetric difference operator defined union difference x y difference y x, , max(f_diff(x, y), f_diff(y, x)). f_abs_diff(): fuzzy absolute difference operator defined absolute difference x y, , abs(x - y). name functions can used parameter dtype spa_difference() function.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_diff_operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute fuzzy difference operators — fsr_diff_operators","text":"","code":"x <- c(0.1, 0.3, 0.6, 0.8) y <- c(0.9, 0.7, 0.4, 0.2)  f_diff(x, y) #> [1] 0.1 0.3 0.6 0.8 f_bound_diff(x, y) #> [1] 0.0 0.0 0.2 0.6 f_symm_diff(x, y) #> [1] 0.9 0.7 0.6 0.8 f_abs_diff(x, y) #> [1] 0.8 0.4 0.2 0.6"},{"path":"https://accarniel.github.io/fsr/reference/fsr_eval_modes.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a membership degree — fsr_eval_modes","title":"Evaluate a membership degree — fsr_eval_modes","text":"family functions implements evaluation modes returns Boolean value given degree [0, 1] obtained membership function linguistic value.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_eval_modes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a membership degree — fsr_eval_modes","text":"","code":"soft_eval(degree)  strict_eval(degree)  alpha_eval(degree, alpha)  soft_alpha_eval(degree, alpha)"},{"path":"https://accarniel.github.io/fsr/reference/fsr_eval_modes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a membership degree — fsr_eval_modes","text":"degree numerical vector whose values [0, 1]. alpha single numeric value [0, 1].","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_eval_modes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a membership degree — fsr_eval_modes","text":"Boolean vector.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_eval_modes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate a membership degree — fsr_eval_modes","text":"functions yield Boolean value indicates whether membership degree matches expected interpretation (according meaning evaluation mode). , parameter degree value [0, 1] evaluation mode \"translates\" meaning degree truth Boolean value. different ways make translation: soft_eval() returns TRUE degree greater 0. strict_eval() returns TRUE degree equal 1. alpha_eval() returns TRUE degree greater equal another value (named alpha). soft_alpha_eval() returns TRUE degree greater another value (named alpha). operators employed process evaluation modes fuzzy topological relationships (parameter eval_mode) processed Boolean predicates.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_eval_modes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a membership degree — fsr_eval_modes","text":"","code":"x <- c(0, 0.1, 0.3, 0.6, 1, 0.8)  soft_eval(x) #> [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE strict_eval(x) #> [1] FALSE FALSE FALSE FALSE  TRUE FALSE alpha_eval(x, 0.3) #> [1] FALSE FALSE  TRUE  TRUE  TRUE  TRUE soft_alpha_eval(x, 0.3) #> [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE"},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"functions yield crisp spatial object (sfg object) formed geometric parts components pgeometry given input satisfy filter condition based membership degrees.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"","code":"spa_range(pgo, lvalue, rvalue, lside_closed = TRUE, rside_closed = TRUE)  spa_alpha_cut(pgo, alpha)  spa_strict_alpha_cut(pgo, alpha)"},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"pgo pgeometry object type. lvalue numeric value denoting left side interval [0, 1]. rvalue numeric value denoting right side interval [0, 1]. lside_closed Boolean value indicating whether left side closed . default value TRUE. rside_closed Boolean value indicating whether right side closed . default value TRUE. alpha numeric value. spa_alpha_cut(), must [0, 1]. spa_strict_alpha_cut(), must ]0, 1].","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"sfg object represents geometric union components extracted applying specific filter condition.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"Given spatial plateau object input, functions return crisp spatial object formed geometric parts components input satisfy filter condition based membership degrees. filter condition function detailed follows: spa_alpha_cut() selects components membership degrees greater equal given value [0, 1] indicated parameter alpha. spa_strict_alpha_cut() picks subset components membership values greater parameter alpha (value ]0, 1]). spa_range() generalizes two operations allows one pick components membership degrees belonging given open closed interval. parameters lside_closed rside_closed, respectively, determine whether left right side (parameters lvalue rvalue) interval open (FALSE) closed (TRUE). example, represent right open interval [0.5, 0.8[, following parameter values given: lvalue = 0.5, rvalue = 0.8, lside_closed = TRUE, rside_closed = FALSE.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_filter_operations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a crisp spatial object formed by geometric parts of a pgeometry object — fsr_filter_operations","text":"","code":"pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((1 2), (2 1), (3 2))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0.5), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3.5))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (4 2))\", 0.4)  # Creating a plateau point object ppoint <- create_pgeometry(list(pcp1, pcp2, pcp3, pcp4, pcp5), \"PLATEAUPOINT\") ppoint #> [1] \"PLATEAUPOINT ((POINT (0 0), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((0 0.5), (2 3)), 0.7), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9), (MULTIPOINT ((1 2), (2 1), (3 2)), 1))\"  # Processing the alpha-cut, strict alpha-cut, and range spa_alpha_cut(ppoint, 0.7) #> MULTIPOINT ((0 0.5), (1 1), (1 2), (1 3), (2 1), (2 3), (3 1), (3 2), (3 3)) spa_strict_alpha_cut(ppoint, 0.7) #> MULTIPOINT ((1 1), (1 2), (1 3), (2 1), (3 1), (3 2), (3 3)) spa_range(ppoint, 0.4, 0.8) #> MULTIPOINT ((0 0.5), (2 0), (2 2), (2 3), (2 4))"},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute fuzzy geometric set operations — fsr_geometric_operations","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"spatial plateau set operations plateau intersection, plateau union, plateau difference implement respective operations fuzzy geometric intersection, fuzzy geometric union, fuzzy geometric difference.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"","code":"spa_intersection(pgo1, pgo2, itype = \"min\", as_pcomposition = FALSE)  spa_union(pgo1, pgo2, utype = \"max\", as_pcomposition = FALSE)  spa_difference(pgo1, pgo2, dtype = \"f_diff\", as_pcomposition = FALSE)  spa_common_points(pline1, pline2, itype = \"min\")"},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"pgo1 pgeometry object type. pgo2 pgeometry object type. itype character value indicates name function implementing t-norm. default value \"min\", standard operator intersection. as_pcomposition logical value; TRUE, returns spatial plateau composition object. utype character value refers t-conorm. default value \"max\", standard operator union. dtype character value indicates name difference operator. default value \"f_diff\", implements standard fuzzy difference. pline1 pgeometry object type PLATEAULINE. pline2 pgeometry object type PLATEAULINE.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"pgeometry object result fuzzy geometric set operation.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"receive two pgeometry objects type input yield another pgeometry object output. family fuzzy geometric set operations consists following functions: spa_intersection() computes geometric intersection two spatial plateau objects. membership degree common points calculated using t-norm operator given parameter itype. Currently, can assume \"min\" (default) \"prod\". spa_union() computes geometric union two spatial plateau objects. membership degree common points calculated using t-conorm operator given parameter utype. Currently, can assume \"max\" (default). spa_difference() computes geometric difference two spatial plateau objects. membership degree common points calculated using difference operator given parameter dtype. Currently, can assume \"f_diff\" (default fuzzy difference), \"f_bound_diff\" (fuzzy bounded difference), \"f_symm_diff\" (fuzzy symmetric difference), \"f_abs_diff\" (fuzzy absolute difference). t-norms, t-conorms, difference operators can implemented given values parameters itype, utype, dtype, respectively. , following steps performed: Implement function accepts two numeric values [0, 1] inputs yields another numeric value [0, 1] output. Recall t-norms t-conorms must specific properties according fuzzy set theory. Use name function character value corresponding parameter itype, utype, dtype. example operator source code f_bound_diff(): f_bound_diff <- function(x, y) { max(0, (x - y)) } spa_common_points() deprecated. past, computed common points two plateau line objects; now, can use spa_intersection().","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions spatial plateau set operations explained detail : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018. Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_geometric_operations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute fuzzy geometric set operations — fsr_geometric_operations","text":"","code":"library(ggplot2)  # Point components pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9)  pcp4 <- create_component(\"MULTIPOINT((2 2), (2 4), (3 2))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (4 2))\", 0.4) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7)  lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) lcp5 <- create_component(\"LINESTRING(-1 1, 2 2)\", 0.9) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8)  # Creating plateau point objects ppoint1 <- create_pgeometry(list(pcp1, pcp2, pcp3), \"PLATEAUPOINT\") ppoint2 <- create_pgeometry(list(pcp4, pcp5, pcp6, pcp7), \"PLATEAUPOINT\") # Creating plateau line objects pline1 <- create_pgeometry(list(lcp1, lcp2, lcp3), \"PLATEAULINE\") pline2 <- create_pgeometry(list(lcp4, lcp5), \"PLATEAULINE\") # Creating a plateau region objects pregion <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\")  # Defining a wrapper to combine plots side by side, for convenience combine_plots <- function(plot1, plot2, plot3) {   # setting the same range of coordinates and removing the legend of plot1 and plot2   plot1 <- plot1 + coord_sf(xlim = c(0, 4), ylim = c(0, 4)) + theme(legend.position = \"none\")   plot2 <- plot2 + coord_sf(xlim = c(0, 4), ylim = c(0, 4)) + theme(legend.position = \"none\")   plot3 <- plot3 + coord_sf(xlim = c(0, 4), ylim = c(0, 4))   ggplot() +     annotation_custom(ggplotGrob(plot1), xmin = 0, xmax = 0.5, ymin = 0.5, ymax = 1) +     annotation_custom(ggplotGrob(plot2), xmin = 0.5, xmax = 1, ymin = 0.5, ymax = 1) +     annotation_custom(ggplotGrob(plot3), xmin = 0, xmax = 1, ymin = 0, ymax = 0.5) +     coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +     theme_void() }  plot_ppoint1 <- plot(ppoint1) + ggtitle(\"Plateau point 1\") plot_ppoint2 <- plot(ppoint2) + ggtitle(\"Plateau point 2\") plot_pline1 <- plot(pline1) + ggtitle(\"Plateau line 1\") plot_pline2 <- plot(pline2) + ggtitle(\"Plateau line 2\") plot_pregion <- plot(pregion) + ggtitle(\"Plateau region\")  # Computing the intersection ppoints_intersec <- spa_intersection(ppoint1, ppoint2) plot_inter <- plot(ppoints_intersec) + ggtitle(\"Intersection\") combine_plots(plot_ppoint1, plot_ppoint2, plot_inter)   if (FALSE) { # varying the t-norm  ppoints_intersec <- spa_intersection(ppoint1, ppoint2, itype = \"prod\") plot_inter <- plot(ppoints_intersec) + ggtitle(\"Intersection (prod)\") combine_plots(plot_ppoint1, plot_ppoint2, plot_inter)  plines_intersec <- spa_intersection(pline1, pline2) plot_inter <- plot(plines_intersec) + ggtitle(\"Intersection\") combine_plots(plot_pline1, plot_pline2, plot_inter)  pregion_pline_intersec <- spa_intersection(pline1, pregion) plot_inter <- plot(pregion_pline_intersec) + ggtitle(\"Intersection\") combine_plots(plot_pline1, plot_pregion, plot_inter)  # Computing the union ppoints_union <- spa_union(ppoint1, ppoint2) plot_union <- plot(ppoints_union) + ggtitle(\"Union\") combine_plots(plot_ppoint1, plot_ppoint2, plot_union)  plines_union <- spa_union(pline1, pline2) plot_union <- plot(plines_union) + ggtitle(\"Union\") combine_plots(plot_pline1, plot_pline2, plot_union)  pregion_pline_union <- spa_union(pline1, pregion) plot_union <- plot(pregion_pline_union) + ggtitle(\"Union\") combine_plots(plot_pline1, plot_pregion, plot_union)  # Computing the difference ppoints_diff <- spa_difference(ppoint1, ppoint2) plot_diff <- plot(ppoints_diff) + ggtitle(\"Difference\") combine_plots(plot_ppoint1, plot_ppoint2, plot_diff)  plines_diff <- spa_difference(pline1, pline2) plot_diff <- plot(plines_diff) + ggtitle(\"Difference\") combine_plots(plot_pline1, plot_pline2, plot_diff)  pregion_pline_diff <- spa_difference(pline1, pregion) plot_diff <- plot(pregion_pline_diff) + ggtitle(\"Difference\") combine_plots(plot_pline1, plot_pregion, plot_diff) }"},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute fuzzy numerical operations — fsr_numerical_operations","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"Fuzzy numerical operations implemented spatial plateau numerical operations, extract geometric measurements spatial plateau objects, area plateau region object length plateau line object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"","code":"spa_avg_degree(pgo)  spa_ncomp(pgo)  spa_area(pgo)  spa_perimeter(pgo)  spa_length(pgo)"},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"pgo pgeometry object type PLATEAULINE, PLATEAUCOMPOSITION, PLATEAUCOLLECTION. throws warning different type given.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"numerical value.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"functions calculate numerical properties spatial plateau objects (.e., pgeometry objects). type-independent. means parameter can pgeometry object type. type-independent functions : spa_avg_degree() calculates average membership degree spatial plateau object. spa_ncomp() returns number components spatial plateau object. remaining functions type-dependent. means parameter specific type. type-dependent functions : spa_area() computes area plateau region, plateau composition, plateau collection object. spa_perimeter() computes perimeter plateau region, plateau composition, plateau collection. spa_length() computes length plateau line, plateau composition, plateau collection object. aforementioned functions, input incorrect data type, throws warning message returns 0.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions spatial plateau numerical operations introduced : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_numerical_operations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute fuzzy numerical operations — fsr_numerical_operations","text":"","code":"# Point components pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((1 2), (2 1), (3 2))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0.5), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3.5))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (4 2))\", 0.4) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7) lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) lcp5 <- create_component(\"LINESTRING(-1 1, 2 2)\", 0.9) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8)  # Creating spatial plateau objects ppoint <- create_pgeometry(list(pcp1, pcp2, pcp3, pcp4, pcp5), \"PLATEAUPOINT\") pline <- create_pgeometry(list(lcp1, lcp2, lcp3), \"PLATEAULINE\") pregion <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\") pcomp <- create_pgeometry(list(pcp6, pcp7, lcp4, lcp5), \"PLATEAUCOMPOSITION\") pcol <- create_pgeometry(list(ppoint, pline, pregion, pcomp), \"PLATEAUCOLLECTION\")  spa_avg_degree(ppoint) #> [1] 0.68 spa_avg_degree(pline) #> [1] 0.4666667 spa_avg_degree(pregion) #> [1] 0.6 spa_avg_degree(pcomp) #> [1] 0.7875 spa_avg_degree(pcol) #> [1] 0.6335417  spa_ncomp(ppoint) #> [1] 5 spa_ncomp(pline) #> [1] 3 spa_ncomp(pregion) #> [1] 2 spa_ncomp(pcomp) #> [1] 4 spa_ncomp(pcol) #> [1] 14  spa_area(pregion) #> [1] 2 spa_area(pcomp) #> [1] 0 spa_area(pcol) #> [1] 2  spa_perimeter(pregion) #> [1] 7.773525 spa_perimeter(pcomp) #> [1] 0 spa_perimeter(pcol) #> [1] 7.773525  spa_length(pline) #> [1] 4.335866 spa_length(pcomp) #> [1] 3.890081 spa_length(pcol) #> [1] 8.225947"},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute fuzzy topological relationships — fsr_topological_relationships","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"Fuzzy topological relationships implemented spatial plateau topological relationships. fuzzy topological relationship expresses particular relative position two spatial plateau objects. topological relationship determines degree holds two spatial plateau objects real value interval [0, 1].","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"","code":"spa_overlap(pgo1, pgo2, itype = \"min\", ret = \"degree\", ...)  spa_meet(pgo1, pgo2, itype = \"min\", ret = \"degree\", ...)  spa_disjoint(pgo1, pgo2, itype = \"min\", ret = \"degree\", ...)  spa_equal(pgo1, pgo2, utype = \"max\", ret = \"degree\", ...)  spa_inside(pgo1, pgo2, utype = \"max\", ret = \"degree\", ...)  spa_contains(pgo1, pgo2, utype = \"max\", ret = \"degree\", ...)"},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"pgo1 pregion object. pgo2 pregion object. itype character value indicates name function implementing t-norm. default value \"min\", standard operator intersection. ret character value indicates return type fuzzy topological relationship. default value \"degree\" possible values \"list\" \"bool\". ... <dynamic-dots> ret = \"bool\", two additional parameters informed, described . utype character value indicates name function implementing t-conorm. default value \"max\", standard operator union.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"returning value determined parameter ret, described .","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"functions implement spatial plateau topological relationships plateau region objects. key idea relationships consider point subsets resulting combination spatial plateau set operations spatial plateau metric operations spatial plateau objects computing resulting degree. resulting degree can also interpreted linguistic value. spatial plateau topological relationships implemented following functions: spa_overlap() computes overlapping degree two plateau region objects. Since uses intersection operation, t-norm operator can given parameter itype. Currently, can assume \"min\" (default) \"prod\". spa_meet() computes meeting degree two plateau region objects. Similarly spa_overlap, t-norm operator can given parameter itype. spa_disjoint() computes disjointedness degree two plateau region objects. Similarly spa_overlap spa_meet, t-norm operator can given parameter itype. spa_equal() computes equal two plateau region objects. Since uses union operation, t-conorm operator can given parameter utype. Currently, can assume \"max\" (default). spa_inside() computes containment degree pgo1 pgo2. Similarly spa_equal(), t-conorm operator can given parameter utype. spa_contains() changes order operations pgo1 ad pgo2 invoking spa_inside(). parameter ret determines returning value fuzzy topological relationship. default value \"degree\" (default), indicates function return value [0, 1] represents degree truth given topological relationship. remainder possible values, functions make use set linguistic values characterize different situations topological relationships. linguistic value associated membership function defined domain [0, 1]. fsr package default set linguistic values. can use function spa_set_classification() change set linguistic values. remainder possible values parameter ret : ret = \"list\" indicates function return named list containing membership degree result predicate linguistic value (.e., employs membership functions linguistic values). ret = \"bool\" indicates function return Boolean value indicating whether degree returned topological relationship matches given linguistic value according evaluation mode. evaluation mode linguistic values informed using parameters eval_mode lval, respectively. possible values eval_mode : \"soft_eval\", \"strict_eval\", \"alpha_eval\", \"soft_alpha_eval\". different behavior computing Boolean value membership function linguistic value. See documentation functions soft_eval(), strict_eval(), alpha_eval(), soft_alpha_eval() details. Note parameter lval accept character value belonging set linguistic values characterize different situations topological relationships.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions spatial plateau topological relationships fuzzy topological relationships respectively introduced : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018. Carniel, . C.; Schneider, M. Conceptual Model Fuzzy Topological Relationships Fuzzy Regions. Proceedings 2016 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2016), pp. 2271-2278, 2016.","code":""},{"path":"https://accarniel.github.io/fsr/reference/fsr_topological_relationships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute fuzzy topological relationships — fsr_topological_relationships","text":"","code":"library(tibble) library(sf)  set.seed(456)  # Generating some random points to create pgeometry objects by using spa_creator() tbl = tibble(x = runif(10, min= 0, max = 30),               y = runif(10, min = 0, max = 30),               z = runif(10, min = 0, max = 50))  # Getting the convex hull on the points to clip plateau region objects during their constructions pts <- st_as_sf(tbl, coords = c(1, 2)) ch <- st_convex_hull(do.call(c, st_geometry(pts)))  pregions <- spa_creator(tbl, base_poly = ch, fuzz_policy = \"fcp\", k = 2)  plot(pregions$pgeometry[[1]])  plot(pregions$pgeometry[[2]])   if (FALSE) {  # Showing the different types of returning values spa_overlap(pregions$pgeometry[[1]], pregions$pgeometry[[2]]) spa_overlap(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") spa_overlap(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"bool\",             eval_mode = \"soft_eval\", lval = \"mostly\")  ## Examples for evaluating the other fuzzy topological relationships spa_meet(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") spa_disjoint(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") spa_equal(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") spa_inside(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") spa_contains(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") }"},{"path":"https://accarniel.github.io/fsr/reference/pcollection-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing plateau collections (subclass of pgeometry) — pcollection-class","title":"An S4 Class for representing plateau collections (subclass of pgeometry) — pcollection-class","text":"S4 Class representing plateau collections (subclass pgeometry)","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing plateau collections (subclass of pgeometry) — pcollection-class","text":"pcollection object composed list spatial plateau objects inherits attribute supp class pgeometry (.e., support).","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing plateau collections (subclass of pgeometry) — pcollection-class","text":"supp inherited pgeometry. pgos list spatial plateau objects.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing plateau collections (subclass of pgeometry) — pcollection-class","text":"Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"pcollection_to_pcomposition() converts plateau collection object equivalent plateau composition object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"","code":"pcollection_to_pcomposition(pcol)"},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"pcol pcollection object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"pcomposition object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"pcollection_to_pcomposition() function yields pcomposition object equivalent pcollection object given input aggregating spatial plateau objects type.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcollection_to_pcomposition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a plateau collection object into a plateau composition object — pcollection_to_pcomposition","text":"","code":"# Point components pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((10 10), (9 8), (7 7))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (2 3))\", 0.4) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7) lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) lcp5 <- create_component(\"LINESTRING(-1 1, 2 2)\", 0.9) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8)  # Creating plateau point objects ppoint1 <- create_pgeometry(list(pcp1, pcp2, pcp3), \"PLATEAUPOINT\") ppoint2 <- create_pgeometry(list(pcp4, pcp5), \"PLATEAUPOINT\") ppoint3 <- create_pgeometry(list(pcp4, pcp5), \"PLATEAUPOINT\") ppoint4 <- create_pgeometry(list(pcp6, pcp7), \"PLATEAUPOINT\") # Creating plateau line objects pline1 <- create_pgeometry(list(lcp1, lcp3), \"PLATEAULINE\") pline2 <- create_pgeometry(list(lcp2, lcp4), \"PLATEAULINE\") pline3 <- create_pgeometry(list(lcp5), \"PLATEAULINE\") # Creating a plateau region objects pregion <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\") # Creating a plateau composition object pcomposition <- create_pgeometry(list(ppoint4, pline3), \"PLATEAUCOMPOSITION\") # Creating plateau collection objects pcol1 <- create_pgeometry(list(ppoint1, ppoint2, ppoint3, pline1), \"PLATEAUCOLLECTION\") pcol2 <- create_pgeometry(list(pline2, pregion, pcomposition, pcol1), \"PLATEAUCOLLECTION\") pcol2 #> [1] \"PLATEAUCOLLECTION (PLATEAULINE ((LINESTRING (1 3, 1 2, 2 0.5), 0.5), (LINESTRING (1 1.5, 2 1.2), 1)), PLATEAUREGION ((POLYGON ((0 0, 1 4, 2 2, 0 0)), 0.4), (POLYGON ((2 0.5, 4 1, 4 0, 2 0.5)), 0.8)), PLATEAUCOMPOSITION (PLATEAUPOINT ((MULTIPOINT ((1 0), (2 3)), 0.4), (MULTIPOINT ((0 1), (3 3)), 0.85)), PLATEAULINE ((LINESTRING (-1 1, 2 2), 0.9)), PLATEAUREGION EMPTY), PLATEAUCOLLECTION (PLATEAUPOINT ((POINT (0 0), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9)), PLATEAUPOINT ((MULTIPOINT ((0 0), (2 3)), 0.7), (MULTIPOINT ((10 10), (9 8), (7 7)), 1)), PLATEAUPOINT ((MULTIPOINT ((0 0), (2 3)), 0.7), (MULTIPOINT ((10 10), (9 8), (7 7)), 1)), PLATEAULINE ((LINESTRING (0 0, 1 1.5), 0.2), (LINESTRING (2 1.2, 3 1.6, 4 4), 0.7))))\" plot(pcol2)  if (FALSE) { converted_pcomp <- pcollection_to_pcomposition(pcol2) converted_pcomp plot(converted_pcomp) }"},{"path":"https://accarniel.github.io/fsr/reference/pcomposition-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing plateau compositions (subclass of pgeometry) — pcomposition-class","title":"An S4 Class for representing plateau compositions (subclass of pgeometry) — pcomposition-class","text":"S4 Class representing plateau compositions (subclass pgeometry)","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcomposition-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing plateau compositions (subclass of pgeometry) — pcomposition-class","text":"pcomposition object composed ppoint object, pline object, pregion object inherits attribute supp class pgeometry (.e., support).","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcomposition-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing plateau compositions (subclass of pgeometry) — pcomposition-class","text":"supp inherited pgeometry. ppoint plateau point object. pline plateau line object. pregion plateau region object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pcomposition-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing plateau compositions (subclass of pgeometry) — pcomposition-class","text":"Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pgeometry-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing spatial plateau data types — pgeometry-class","title":"An S4 Class for representing spatial plateau data types — pgeometry-class","text":"S4 Class representing spatial plateau data types","code":""},{"path":"https://accarniel.github.io/fsr/reference/pgeometry-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing spatial plateau data types — pgeometry-class","text":"superclass representing spatial plateau data types. pgeometry object stores sfg object represents union crisp spatial objects components (.e., support).","code":""},{"path":"https://accarniel.github.io/fsr/reference/pgeometry-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing spatial plateau data types — pgeometry-class","text":"supp sfg object stores union spatial objects components spatial plateau object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pgeometry-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing spatial plateau data types — pgeometry-class","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pline-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing plateau lines (subclass of pgeometry) — pline-class","title":"An S4 Class for representing plateau lines (subclass of pgeometry) — pline-class","text":"S4 Class representing plateau lines (subclass pgeometry)","code":""},{"path":"https://accarniel.github.io/fsr/reference/pline-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing plateau lines (subclass of pgeometry) — pline-class","text":"pline object composed list component objects inherits attribute supp class pgeometry (.e., support).","code":""},{"path":"https://accarniel.github.io/fsr/reference/pline-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing plateau lines (subclass of pgeometry) — pline-class","text":"supp inherited pgeometry. component list components.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pline-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing plateau lines (subclass of pgeometry) — pline-class","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphically visualize pgeometry objects — plot","title":"Graphically visualize pgeometry objects — plot","text":"fsr_plot() function (S4 method plot()) plots pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphically visualize pgeometry objects — plot","text":"","code":"fsr_plot(pgo, base_poly = NULL, add_base_poly = TRUE, low = \"white\", high = \"black\",           crs = NA, clip = FALSE, line_lwd = 1, region_lwd = 1, ...)  # S4 method for pgeometry,missing plot(x, y, ...)"},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphically visualize pgeometry objects — plot","text":"pgo pgeometry object type. base_poly sfg object type POLYGON MULTIPOLYGON. can also sfc object one element type POLYGON MULTIPOLYGON. add_base_poly Boolean value indicates whether base_poly added visualization. low character value indicates color lowest membership degree (.e., 0). Default \"white\". high character value indicates color highest membership degree (.e., 1). Default \"black\". crs numerical value denotes coordinate reference system (.e., EPSG code) visualization. Default NA. clip Boolean value indicates whether boundaries components must clipped sfg object base_poly (null). line_lwd numeric value specifies line width linear components. region_lwd numeric value specifies line width boundaries polygonal components. ... <dynamic-dots> Optional parameters. can parameters geom_sf() function ggplot2. x pgeometry object type. y applicable.","code":""},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphically visualize pgeometry objects — plot","text":"ggplot object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphically visualize pgeometry objects — plot","text":"fsr_plot() function uses ggplot2 package built resulting plot. receives pgeometry object input (empty, empty graphics obtained). low high parameters colors minimum maximum limits membership degrees. default colors \"white\" \"black\", respectively. colors can given way colors informed visualizations produced ggplot2 package. possible clip geometric format components using parameter base_poly. boundaries object can also included visualization parameter add_base_poly TRUE. Since returned value ggplot object, can customized (see examples ).","code":""},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graphically visualize pgeometry objects — plot","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023.","code":""},{"path":"https://accarniel.github.io/fsr/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphically visualize pgeometry objects — plot","text":"","code":"library(sf)  pts <- rbind(c(0, 2), c(4, 2)) # Point components pcp1 <- create_component(st_multipoint(pts), 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7) lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8) # Creating spatial plateau objects pp <- create_pgeometry(list(pcp1, pcp2, pcp3), \"PLATEAUPOINT\") pl <- create_pgeometry(list(lcp1, lcp3, lcp4), \"PLATEAULINE\") pr <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\") pcm <- create_pgeometry(list(pcp1, pcp2, lcp1, lcp2, lcp3, rcp2), \"PLATEAUCOMPOSITION\") pcl <- create_pgeometry(list(pp, pr, pcm), \"PLATEAUCOLLECTION\")  # Displaying their textual representations pp #> [1] \"PLATEAUPOINT ((MULTIPOINT ((0 2), (4 2)), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9))\" pl #> [1] \"PLATEAULINE ((LINESTRING (0 0, 1 1.5), 0.2), (LINESTRING (2 1.2, 3 1.6, 4 4), 0.7), (LINESTRING (1 1.5, 2 1.2), 1))\" pr #> [1] \"PLATEAUREGION ((POLYGON ((0 0, 1 4, 2 2, 0 0)), 0.4), (POLYGON ((2 0.5, 4 1, 4 0, 2 0.5)), 0.8))\" pcm #> [1] \"PLATEAUCOMPOSITION (PLATEAUPOINT ((MULTIPOINT ((0 2), (4 2)), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5)), PLATEAULINE ((LINESTRING (0 0, 1 1.5), 0.2), (LINESTRING (1 3, 1 2, 2 0.5), 0.5), (LINESTRING (2 1.2, 3 1.6, 4 4), 0.7)), PLATEAUREGION ((POLYGON ((2 0.5, 4 1, 4 0, 2 0.5)), 0.8)))\" pcl #> [1] \"PLATEAUCOLLECTION (PLATEAUPOINT ((MULTIPOINT ((0 2), (4 2)), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9)), PLATEAUREGION ((POLYGON ((0 0, 1 4, 2 2, 0 0)), 0.4), (POLYGON ((2 0.5, 4 1, 4 0, 2 0.5)), 0.8)), PLATEAUCOMPOSITION (PLATEAUPOINT ((MULTIPOINT ((0 2), (4 2)), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5)), PLATEAULINE ((LINESTRING (0 0, 1 1.5), 0.2), (LINESTRING (1 3, 1 2, 2 0.5), 0.5), (LINESTRING (2 1.2, 3 1.6, 4 4), 0.7)), PLATEAUREGION ((POLYGON ((2 0.5, 4 1, 4 0, 2 0.5)), 0.8))))\"  # Plotting them plot(pp)  plot(pl)  plot(pr)  plot(pcm)  plot(pcl)  if (FALSE) { # Custom colors fsr_plot(pr, low = \"green\", high = \"blue\")  # Changing the line width of line components fsr_plot(pl, line_lwd = 2)  # Changing the line width of boundary lines of region components fsr_plot(pr, region_lwd = 2)  # Changing the line width of boundary lines of region components and its color fsr_plot(pr, region_lwd = 2, color = \"blue\")  # You can customize the whole visualization using ggplot library(ggplot2)  fsr_plot(pp, size = 5) +      theme(legend.position = \"none\") +   theme(text=element_text(size=20, family = \"serif\", color = \"black\"),         axis.text=element_text(color=\"black\")) +   scale_x_continuous(breaks = c(0, 1, 2, 3, 4)) +   scale_y_continuous(breaks = c(0, 1, 2, 3, 4)) }"},{"path":"https://accarniel.github.io/fsr/reference/ppoint-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing plateau points (subclass of pgeometry) — ppoint-class","title":"An S4 Class for representing plateau points (subclass of pgeometry) — ppoint-class","text":"S4 Class representing plateau points (subclass pgeometry)","code":""},{"path":"https://accarniel.github.io/fsr/reference/ppoint-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing plateau points (subclass of pgeometry) — ppoint-class","text":"ppoint object composed list component objects inherits attribute supp class pgeometry (.e., support).","code":""},{"path":"https://accarniel.github.io/fsr/reference/ppoint-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing plateau points (subclass of pgeometry) — ppoint-class","text":"supp inherited pgeometry. component list components.","code":""},{"path":"https://accarniel.github.io/fsr/reference/ppoint-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing plateau points (subclass of pgeometry) — ppoint-class","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pregion-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 Class for representing plateau regions (subclass of pgeometry) — pregion-class","title":"An S4 Class for representing plateau regions (subclass of pgeometry) — pregion-class","text":"S4 Class representing plateau regions (subclass pgeometry)","code":""},{"path":"https://accarniel.github.io/fsr/reference/pregion-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 Class for representing plateau regions (subclass of pgeometry) — pregion-class","text":"pregion object composed list component objects inherits attribute supp class pgeometry (.e., support).","code":""},{"path":"https://accarniel.github.io/fsr/reference/pregion-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 Class for representing plateau regions (subclass of pgeometry) — pregion-class","text":"supp inherited pgeometry. component list components.","code":""},{"path":"https://accarniel.github.io/fsr/reference/pregion-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An S4 Class for representing plateau regions (subclass of pgeometry) — pregion-class","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tibble as_tibble","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Add components to a pgeometry object — spa_add_component","title":"Add components to a pgeometry object — spa_add_component","text":"spa_add_component() inserts components spatial plateau object (.e., pgeometry object).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add components to a pgeometry object — spa_add_component","text":"","code":"spa_add_component(pgo, components, is_valid = FALSE)"},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add components to a pgeometry object — spa_add_component","text":"pgo pgeometry object type. components component object list component objects. is_valid Boolean value check user wants validate updated spatial plateau object end. is_valid = TRUE, calls validObject() method.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add components to a pgeometry object — spa_add_component","text":"pgeometry object containing component objects.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add components to a pgeometry object — spa_add_component","text":"function implements \\(\\odot\\) operator defined Spatial Plateau Algebra. goal function insert component list components pgeometry object. crisp spatial object component must compatible type plateau spatial object. instance, pregion object accepts components containing polygons (e.g., POLYGON MULTIPOLYGON). case pcomposition object type component compatible added. instance, point component added plateau point sub-object plateau composition object. hand, pcollection object can multiple spatial objects type, function applicable . insertion based membership degree component. Thus, preserves properties spatial plateau object. However, spa_add_component() assumes geometric format component valid (.e., overlap existing components).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add components to a pgeometry object — spa_add_component","text":"formal definition \\(\\odot\\) operator described : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_add_component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add components to a pgeometry object — spa_add_component","text":"","code":"comp1 <- create_component(\"MULTIPOINT(1 1, 2 2)\", 0.2)  comp2 <- create_component(\"POINT(1 5)\", 0.8)    # appending these components into an empty pgeometry object pp <- create_empty_pgeometry(\"PLATEAUPOINT\") pp <- spa_add_component(pp, list(comp1, comp2)) pp #> [1] \"PLATEAUPOINT ((MULTIPOINT ((1 1), (2 2)), 0.2), (POINT (1 5), 0.8))\"  # inserting components with existing membership degrees are merged comp3 <- create_component(\"MULTIPOINT(0 0, 4 4)\", 0.2) pp <- spa_add_component(pp, comp3) pp #> [1] \"PLATEAUPOINT ((MULTIPOINT ((0 0), (1 1), (2 2), (4 4)), 0.2), (POINT (1 5), 0.8))\"  comp4 <- create_component(\"MULTIPOINT(0 1, 3 4)\", 1) pc <- create_pgeometry(list(comp4), \"PLATEAUCOMPOSITION\") pc #> [1] \"PLATEAUCOMPOSITION (PLATEAUPOINT ((MULTIPOINT ((0 1), (3 4)), 1)), PLATEAULINE EMPTY, PLATEAUREGION EMPTY)\"  # appending these components into pc comp5 <- create_component(\"LINESTRING(-1 1, 2 2)\", 0.9) comp6 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) pc <- spa_add_component(pc, list(comp5, comp6)) pc #> [1] \"PLATEAUCOMPOSITION (PLATEAUPOINT ((MULTIPOINT ((0 1), (3 4)), 1)), PLATEAULINE ((LINESTRING (-1 1, 2 2), 0.9)), PLATEAUREGION ((POLYGON ((0 0, 1 4, 2 2, 0 0)), 0.4)))\""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"spa_boundary() yields fuzzy boundary homogeneous spatial plateau object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"","code":"spa_boundary(pgo)"},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"pgo pgeometry object type ppoint, pline, pregion.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"pcomposition object represents fuzzy boundary pgeometry object given input.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"spa_boundary() function employs definition fuzzy boundary context Spatial Plateau Algebra. fuzzy boundary fuzzy spatial object heterogeneous nature. instance, fuzzy boundary plateau region object consists two parts: plateau line object corresponds boundary core . plateau region object comprises points membership degree greater 0 less 1. means spa_boundary() returns pcomposition object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Concepts formal definitions fuzzy boundary introduced : Carniel, . C.; Schneider, M. Conceptual Model Fuzzy Topological Relationships Fuzzy Regions. Proceedings 2016 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2016), pp. 2271-2278, 2016. Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture the fuzzy boundary of a spatial plateau object — spa_boundary","text":"","code":"library(tibble) library(sf) library(ggplot2)  # defining two different types of membership functions trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  set.seed(7) tbl = tibble(x = runif(20, min = 0, max = 30),               y = runif(20, min = 0, max = 50),               z = runif(20, min = 0, max = 100)) classes <- c(\"cold\", \"hot\") cold_mf <- trap_mf(0, 10, 20, 35) hot_mf <- trap_mf(20, 50, 100, 100)  # Getting the convex hull on the points to clip plateau region objects during their constructions pts <- st_as_sf(tbl, coords = c(1, 2)) ch <- st_convex_hull(do.call(c, st_geometry(pts)))  # Using the standard fuzzification policy based on fuzzy sets pregions <- spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf), base_poly = ch) if (FALSE) { pregions plot(pregions$pgeometry[[1]]) + ggtitle(\"Cold\") plot(pregions$pgeometry[[2]]) + ggtitle(\"Hot\") } # capturing and showing the boundary of each pgeometry object previously created boundary_cold <- spa_boundary(pregions$pgeometry[[1]]) boundary_hot <- spa_boundary(pregions$pgeometry[[2]]) if (FALSE) { plot(boundary_cold) + ggtitle(\"Boundary (Cold)\") plot(boundary_hot) + ggtitle(\"Boundary (Hot)\") }"},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"spa_boundary_pregion() yields specific part fuzzy boundary plateau region object. function deprecated; use spa_boundary().","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"","code":"spa_boundary_pregion(pregion, bound_part = \"region\")"},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"pregion pregion object. throws error different type given. bound_part character value indicates part fuzzy boundary returned. can \"region\" \"line\". See details.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"pgeometry object represents specific part fuzzy boundary pgeometry object given input.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"spa_boundary_pregion() function employs definition fuzzy boundary fuzzy region object context Spatial Plateau Algebra. fuzzy boundary fuzzy region object heterogeneous nature since consists two parts: fuzzy line object corresponds boundary core . fuzzy region object comprises points membership degree greater 0 less 1. means spa_boundary_pregion() can yield one specific part fuzzy boundary plateau region object. boundary = \"line\", function returns boundary plateau line pregion (.e., returns pline object). Else boundary = \"region\" (default value), function returns boundary plateau region pregion (.e., returns pregion object). function deprecated; use spa_boundary().","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"Concepts fuzzy boundary plateau region objects introduced : Carniel, . C.; Schneider, M. Conceptual Model Fuzzy Topological Relationships Fuzzy Regions. Proceedings 2016 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2016), pp. 2271-2278, 2016. Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_boundary_pregion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture the fuzzy boundary of a plateau region object — spa_boundary_pregion","text":"","code":"if (FALSE) { library(tibble) library(sf) library(ggplot2)  # defining two different types of membership functions trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  trim_mf <- function(a, b, c) {   function(x) {     pmax(pmin((x - a)/(b - a), (c - x)/(c - b), na.rm = TRUE), 0)   } }  set.seed(7) tbl = tibble(x = runif(10, min = 0, max = 30),               y = runif(10, min = 0, max = 50),               z = runif(10, min = 0, max = 100)) classes <- c(\"cold\", \"hot\") cold_mf <- trap_mf(0, 10, 20, 35) hot_mf <- trim_mf(35, 50, 100)  # Getting the convex hull on the points to clip plateau region objects during their constructions pts <- st_as_sf(tbl, coords = c(1, 2)) ch <- st_convex_hull(do.call(c, st_geometry(pts)))  # Using the standard fuzzification policy based on fuzzy sets pregions <- spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf), base_poly = ch) plot(pregions$pgeometry[[1]]) + ggtitle(\"Cold\") plot(pregions$pgeometry[[2]]) + ggtitle(\"Hot\")  # these functions are now deprecated, use `spa_boundary()`  # capturing and showing the boundary plateau line of each pgeometry object previously created (spa_boundary_pregion(pregions$pgeometry[[1]], bound_part = \"line\"))  (spa_boundary_pregion(pregions$pgeometry[[2]], bound_part = \"line\")) # this part of the boundary is empty because there is no core!  # capturing and showing the boundary plateau region (this is the default behavior) (spa_boundary_pregion(pregions$pgeometry[[1]])) (spa_boundary_pregion(pregions$pgeometry[[2]])) }"},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture the frontier of a plateau region object — spa_contour","title":"Capture the frontier of a plateau region object — spa_contour","text":"spa_contour() extracts frontier (.e., linear boundary) plateau region object maintaining membership degrees.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture the frontier of a plateau region object — spa_contour","text":"","code":"spa_contour(pregion)"},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture the frontier of a plateau region object — spa_contour","text":"pregion pregion object. throws error different type given.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture the frontier of a plateau region object — spa_contour","text":"pline object represents contour (.e. frontier) plateau region object given input.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture the frontier of a plateau region object — spa_contour","text":"spa_contour() function implements definition fuzzy frontier fuzzy region object context Spatial Plateau Algebra. fuzzy frontier fuzzy region object collects single points , preserving membership degrees, interior support. Note fuzzy frontier different fuzzy boundary (see spa_boundary()).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Capture the frontier of a plateau region object — spa_contour","text":"Carniel, . C.; Schneider, M. Conceptual Model Fuzzy Topological Relationships Fuzzy Regions. Proceedings 2016 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2016), pp. 2271-2278, 2016. Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_contour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture the frontier of a plateau region object — spa_contour","text":"","code":"library(tibble) library(sf) library(ggplot2)  # defining two different types of membership functions trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  set.seed(7) tbl = tibble(x = runif(20, min = 0, max = 30),               y = runif(20, min = 0, max = 50),               z = runif(20, min = 0, max = 100)) classes <- c(\"cold\", \"hot\") cold_mf <- trap_mf(0, 10, 20, 35) hot_mf <- trap_mf(20, 50, 100, 100)  # Getting the convex hull on the points to clip plateau region objects during their constructions pts <- st_as_sf(tbl, coords = c(1, 2)) ch <- st_convex_hull(do.call(c, st_geometry(pts)))  # Using the standard fuzzification policy based on fuzzy sets pregions <- spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf), base_poly = ch) pregions #> # A tibble: 2 × 2 #>   class pgeometry #>   <chr> <list>    #> 1 cold  <pregion> #> 2 hot   <pregion> if (FALSE) { plot(pregions$pgeometry[[1]]) + ggtitle(\"Cold\") plot(pregions$pgeometry[[2]]) + ggtitle(\"Hot\") } # capturing and showing the frontier of each pgeometry object previously created cold_contour <- spa_contour(pregions$pgeometry[[1]]) hot_contour <- spa_contour(pregions$pgeometry[[2]]) if (FALSE) { plot(cold_contour) + ggtitle(\"Frontier (Cold)\") plot(hot_contour) + ggtitle(\"Frontier (Hot)\") }"},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the core of a pgeometry object — spa_core","title":"Get the core of a pgeometry object — spa_core","text":"spa_core() yields crisp spatial object (sfg object) corresponds core pgeometry object given input.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the core of a pgeometry object — spa_core","text":"","code":"spa_core(pgo)"},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the core of a pgeometry object — spa_core","text":"pgo pgeometry object type.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the core of a pgeometry object — spa_core","text":"sfg object represents core pgo. can empty object, pgo component membership degree 1.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the core of a pgeometry object — spa_core","text":"spa_core() function employs classical definition core fuzzy set theory context Spatial Plateau Algebra. core comprises points membership degree equal 1. Hence, operation returns sfg object represents component labeled membership degree equal 1 pgeometry object given input. pgeometry object core, empty sfg object returned.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the core of a pgeometry object — spa_core","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions Spatial Plateau Algebra introduced : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the core of a pgeometry object — spa_core","text":"","code":"pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((1 2), (2 1), (3 2))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0.5), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3.5))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (4 2))\", 0.4)  # Creating a plateau point object ppoint <- create_pgeometry(list(pcp1, pcp2, pcp3, pcp4, pcp5), \"PLATEAUPOINT\") ppoint #> [1] \"PLATEAUPOINT ((POINT (0 0), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((0 0.5), (2 3)), 0.7), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9), (MULTIPOINT ((1 2), (2 1), (3 2)), 1))\"  # Getting its core spa_core(ppoint) #> MULTIPOINT ((1 2), (2 1), (3 2))  # Getting the core of an empty pgeometry spa_core(create_empty_pgeometry(\"PLATEAUREGION\")) #> POLYGON EMPTY"},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":null,"dir":"Reference","previous_headings":"","what":"Build pgeometry objects from a point dataset — spa_creator","title":"Build pgeometry objects from a point dataset — spa_creator","text":"spa_creator() builds set spatial plateau objects given point dataset assigned domain-specific numerical values.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build pgeometry objects from a point dataset — spa_creator","text":"","code":"spa_creator(tbl, fuzz_policy = \"fsp\", const_policy = \"voronoi\", ...)"},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build pgeometry objects from a point dataset — spa_creator","text":"tbl data.frame tibble object three columns: (x, y, z). fuzz_policy fuzzification policy employed algorithm. See details . const_policy construction policy used algorithm. See details . ... <dynamic-dots> Parameters chosen policies. See details .","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build pgeometry objects from a point dataset — spa_creator","text":"tibble format (class, pgeometry), class character column pgeometry list pgeometry objects. means spatial plateau object created representing specific class point dataset.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build pgeometry objects from a point dataset — spa_creator","text":"spa_creator() function implements two-stage construction method takes input point dataset produces set spatial plateau objects output. input tbl point dataset (data.frame tibble object) point represents location phenomenon treated application. , point annotated numerical data describe meaning application. Therefore, tbl must three columns: (x, y, z). columns x, y coordinate pairs, z column containing domain-specific numeric values. parameter fuzz_policy refers method used fuzzification stage. stage aims assign membership degrees point dataset. accepts two possible values: \"fsp\" (default) \"fcp\". \"fsp\" stands fuzzy set policy requires two parameters informed ...: classes: character vector containing name classes. mfs: vector membership functions. membership function represents class , length(classes). See provided examples information build membership functions. \"fcp\" stands fuzzy clustering policy requires e1071 package. possible parameters informed ... : k: numeric value refers number groups created. method: fuzzy clustering method package e1071, can either \"cmeans\" (default) \"cshell\". use_coords: Boolean value indicate whether columns (x, y) used clustering algorithm (default FALSE). iter: numeric indicating number maximum iterations clustering algorithm (default 100). optional common parameter fuzzification stages \"digits\". integer value indicates number decimal digits membership degrees calculated fuzzification stage. , used round membership degrees specified number decimal places. careful optional parameter! specify low value \"digits\", membership degrees rounded 0 thus, components created. parameter const_policy refers method used construction stage. stage aims create polygons labeled point dataset use build spatial plateau objects. accepts three possible values: \"voronoi\" (default), \"delaunay\", \"convex_hull\". \"voronoi\" stands Voronoi diagram policy two optional parameter can provided ...: base_poly: sfg object used clip generated polygons. parameter provided, Voronoi created using bounding box (standard behavior package sf). d_tolerance: refers parameter dTolerance employed function st_voronoi() package sf. \"delaunay\" stands Delaunay triangulation policy, accepts following parameters ...: base_poly: sfg object used clip generated triangles. tnorm: t-norm used calculate membership degree triangle. name vectorized function. Possible values \"min\" (default) \"prod\". Note possible use t-norms. t-norm following signature: FUN(x) x numeric vector. function return single numeric value. d_tolerance: refers parameter dTolerance employed function st_triangulate() package sf. \"convex_hull\" stands Convex hull policy, accepts following parameters ...: degrees: numeric vector containing membership degrees used create components. default vector defined seq(0.05, 1, = 0.05). d: numeric value representing tolerance distance compute membership degree elements m membership degrees points. default 0.05. base_poly: sfg object used clip generated polygons.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build pgeometry objects from a point dataset — spa_creator","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions two-stage construction method introduced : Carniel, . C.; Schneider, M. Systematic Approach Creating Fuzzy Region Objects Real Spatial Data Sets. Proceedings 2019 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2019), pp. 1-6, 2019.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_creator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build pgeometry objects from a point dataset — spa_creator","text":"","code":"library(tibble) library(sf) library(ggplot2)   # Defining two different types of membership functions trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  trim_mf <- function(a, b, c) {   function(x) {     pmax(pmin((x - a)/(b - a), (c - x)/(c - b), na.rm = TRUE), 0)   } }  set.seed(7) tbl = tibble(x = runif(10, min = 0, max = 30),               y = runif(10, min = 0, max = 50),               z = runif(10, min = 0, max = 100)) classes <- c(\"cold\", \"hot\") cold_mf <- trap_mf(0, 10, 20, 35) hot_mf <- trim_mf(35, 50, 100)  # Using the standard fuzzification policy based on fuzzy sets res <- spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf)) if (FALSE) { res   plot(res$pgeometry[[1]]) + ggtitle(\"Cold\") plot(res$pgeometry[[2]]) + ggtitle(\"Hot\")  # Getting the convex hull on the points to clip plateau region objects during their constructions pts <- st_as_sf(tbl, coords = c(1, 2)) ch <- st_convex_hull(do.call(c, st_geometry(pts))) res <- spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf), base_poly = ch) plot(res$pgeometry[[1]]) + ggtitle(\"Cold (with clipped boundaries)\") plot(res$pgeometry[[2]]) + ggtitle(\"Hot (with clipped boundaries)\")   # Using the fuzzification policy based on fuzzy clustering spa_creator(tbl, fuzz_policy = \"fcp\", k = 4)  spa_creator(tbl, fuzz_policy = \"fcp\", k = 4, digits = 2)  # Varying the construction policy spa_creator(tbl, fuzz_policy = \"fcp\", k = 3, const_policy = \"delaunay\")  spa_creator(tbl, fuzz_policy = \"fcp\", const_policy = \"delaunay\", k = 3, tnorm = \"prod\")  spa_creator(tbl, fuzz_policy = \"fcp\", k = 2, digits = 2,              degrees = seq(0.1, 1, by = 0.1), d = 0.05, const_policy = \"convex_hull\")  spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf), const_policy = \"delaunay\")              spa_creator(tbl, classes = classes, mfs = c(cold_mf, hot_mf),              digits = 2, const_policy = \"convex_hull\") }"},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"spa_eval() evaluates membership degree given point spatial plateau object type. returns value [0, 1] indicates extent point belongs pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"","code":"spa_eval(pgo, point)"},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"pgo pgeometry object type. point sfg object type POINT.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"numeric value 0 1 indicates membership degree point (.e., sfg object) spatial plateau object (.e., pgeometry object).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"spa_eval() returns membership degree simple point object (.e., sfg object) given spatial plateau object (.e., pgeometry object). evaluation depends following basic cases: simple point object belongs interior boundary one component spatial plateau object, returns membership degree component. simple point object intersects components (e.g., boundaries region components, different line components), returns maximum membership degree intersected components. simple point object disjoint support spatial plateau object, returns 0.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"Formal definitions function described : Carniel, . C.; Galdino, F.; Schneider, M. Evaluating Region Inference Methods Using Fuzzy Spatial Inference Models. Proceedings 2022 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2022), pp. 1-8, 2022. Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_eval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the membership degree of a point in a pgeometry object — spa_eval","text":"","code":"library(sf)  # Point components pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((1 2), (2 1), (3 2))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0.5), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3.5))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (4 2))\", 0.4) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7) lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) lcp5 <- create_component(\"LINESTRING(-1 1, 2 2)\", 0.9) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8)  # Creating spatial plateau objects ppoint <- create_pgeometry(list(pcp1, pcp2, pcp3, pcp4, pcp5), \"PLATEAUPOINT\") pline <- create_pgeometry(list(lcp1, lcp2, lcp3), \"PLATEAULINE\") pregion <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\") pcomp <- create_pgeometry(list(pcp6, pcp7, lcp4, lcp5), \"PLATEAUCOMPOSITION\") pcol <- create_pgeometry(list(ppoint, pline, pregion, pcomp), \"PLATEAUCOLLECTION\")  point <- st_point(c(0, 0))  spa_eval(ppoint, point) #> [1] 0.3 spa_eval(pline, point) #> [1] 0.2 spa_eval(pregion, point) #> [1] 0.4 spa_eval(pcomp, point) #> [1] 0 spa_eval(pcol, point) #> [1] 0.4"},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check two spatial plateau objects for exact equality — spa_exact_equal","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"spa_exact_equal() checks whether two spatial plateau objects exactly equal.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"","code":"spa_exact_equal(pgo1, pgo2)"},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"pgo1 pgeometry object either plateau point, plateau line, plateau region object. pgo2 pgeometry object either plateau point, plateau line, plateau region object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"Boolean value indicates two pgeometry objects exactly equal.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"spa_exact_equal() Boolean function checks fuzzy equality spatial plateau context. Two pgeometry objects exactly equal components equal. Two components equal membership degree (spatially) equal (.e., sfg objects geometric format - means order points can different).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check two spatial plateau objects for exact equality — spa_exact_equal","text":"","code":"pcp1 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp2 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp3 <- create_component(\"MULTIPOINT((10 10), (9 8), (7 7))\", 1) pcp4 <- create_component(\"MULTIPOINT((0 0), (2 3))\", 0.7)  ppoint1 <- create_pgeometry(list(pcp1, pcp2), \"PLATEAUPOINT\") ppoint2 <- create_pgeometry(list(pcp3, pcp4), \"PLATEAUPOINT\")  spa_exact_equal(ppoint1, ppoint2) #> [1] FALSE  spa_exact_equal(ppoint1, ppoint1) #> [1] TRUE"},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":null,"dir":"Reference","previous_headings":"","what":"Check two spatial plateau objects for exact containment — spa_exact_inside","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"spa_exact_inside() checks whether pgeometry object completely inside another pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"","code":"spa_exact_inside(pgo1, pgo2)"},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"pgo1 pgeometry object either plateau point, plateau line, plateau region object. pgo2 pgeometry object either plateau point, plateau line, plateau region object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"Boolean value indicates pgeometry completely certainly inside pgo2.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"spa_exact_inside() Boolean function checks fuzzy containment spatial plateau context. Boolean function checks whether components pgo1 contained components pgo2 considering membership degrees geographic positions. , follows classical definition fuzzy containment fuzzy set theory. words, function checks (standard) intersection pgo1 pgo2 exactly equal pgo1. operands affects result.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_exact_inside.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check two spatial plateau objects for exact containment — spa_exact_inside","text":"","code":"pcp1 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp2 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp3 <- create_component(\"POINT(2 2)\", 0.2) pcp4 <- create_component(\"MULTIPOINT((1 1), (3 3))\", 0.7)  ppoint1 <- create_pgeometry(list(pcp1, pcp2), \"PLATEAUPOINT\") ppoint2 <- create_pgeometry(list(pcp3, pcp4), \"PLATEAUPOINT\")  # is ppoint2 completely and certainly inside ppoint1? spa_exact_inside(ppoint2, ppoint1) #> [1] TRUE  # The order of operands after the result # ppoint1 is not inside ppoint2 since it has different points spa_exact_inside(ppoint1, ppoint2) #> [1] FALSE"},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a plateau collection object — spa_flatten","title":"Flatten a plateau collection object — spa_flatten","text":"spa_flatten() gathers objects plateau collection object reorganizes single flattened spatial plateau object containing quadruple (PLATEAUPOINT, PLATEAULINE, PLATEAUREGION, PLATEAUCOMPOSITION) preserves identity sub-objects.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a plateau collection object — spa_flatten","text":"","code":"spa_flatten(pcol)"},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a plateau collection object — spa_flatten","text":"pcol pcollection object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a plateau collection object — spa_flatten","text":"pcollection object consisting quadruple (PLATEAUPOINT, PLATEAULINE, PLATEAUREGION, PLATEAUCOMPOSITION).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten a plateau collection object — spa_flatten","text":"spa_flatten() function yields single flattened spatial plateau object, aggregating spatial plateau objects types. case two-level hierarchy, .e., plateau collection inside another one, function applied recursively lower levels quadruple built. Hence, simplifies representation complex plateau collection objects. t-conorm considered aggregation max operator.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Flatten a plateau collection object — spa_flatten","text":"Carniel, . C.; Schneider, M. Spatial Data Types Heterogeneously Structured Fuzzy Spatial Collections Compositions. Proceedings 2020 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2020), pp. 1-8, 2020.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a plateau collection object — spa_flatten","text":"","code":"# Point components pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((10 10), (9 8), (7 7))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (2 3))\", 0.4) # Line components lcp1 <- create_component(\"LINESTRING(0 0, 1 1.5)\", 0.2) lcp2 <- create_component(\"LINESTRING(1 3, 1 2, 2 0.5)\", 0.5) lcp3 <- create_component(\"LINESTRING(2 1.2, 3 1.6, 4 4)\", 0.7) lcp4 <- create_component(\"LINESTRING(1 1.5, 2 1.2)\", 1.0) lcp5 <- create_component(\"LINESTRING(-1 1, 2 2)\", 0.9) # Polygon components rcp1 <- create_component(\"POLYGON((0 0, 1 4, 2 2, 0 0))\", 0.4) rcp2 <- create_component(\"POLYGON((2 0.5, 4 1, 4 0, 2 0.5))\", 0.8)  # Creating plateau point objects ppoint1 <- create_pgeometry(list(pcp1, pcp2, pcp3), \"PLATEAUPOINT\") ppoint2 <- create_pgeometry(list(pcp4, pcp5), \"PLATEAUPOINT\") ppoint3 <- create_pgeometry(list(pcp4, pcp5), \"PLATEAUPOINT\") ppoint4 <- create_pgeometry(list(pcp6, pcp7), \"PLATEAUPOINT\") # Creating plateau line objects pline1 <- create_pgeometry(list(lcp1, lcp3), \"PLATEAULINE\") pline2 <- create_pgeometry(list(lcp2, lcp4), \"PLATEAULINE\") pline3 <- create_pgeometry(list(lcp5), \"PLATEAULINE\") # Creating a plateau region objects pregion <- create_pgeometry(list(rcp1, rcp2), \"PLATEAUREGION\") # Creating a plateau composition object pcomposition <- create_pgeometry(list(ppoint4, pline3), \"PLATEAUCOMPOSITION\") # Creating plateau collection objects pcol1 <- create_pgeometry(list(ppoint1, ppoint2, ppoint3, pline1), \"PLATEAUCOLLECTION\") pcol2 <- create_pgeometry(list(pline2, pregion, pcomposition, pcol1), \"PLATEAUCOLLECTION\") if (FALSE) { pcol2 plot(pcol2)  flatten_col <- spa_flatten(pcol2) flatten_col plot(flatten_col) }"},{"path":"https://accarniel.github.io/fsr/reference/spa_get_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the type of a spatial plateau object — spa_get_type","title":"Get the type of a spatial plateau object — spa_get_type","text":"spa_get_type() returns type spatial plateau object. can either \"PLATEAUPOINT\", \"PLATEAULINE\", \"PLATEAUREGION\", \"PLATEAUCOMPOSITION\", \"PLATEAUCOLLECTION\".","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_get_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the type of a spatial plateau object — spa_get_type","text":"","code":"spa_get_type(pgo)"},{"path":"https://accarniel.github.io/fsr/reference/spa_get_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the type of a spatial plateau object — spa_get_type","text":"pgo pgeometry object type.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_get_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the type of a spatial plateau object — spa_get_type","text":"type spatial plateau object character object (.e., string).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_get_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the type of a spatial plateau object — spa_get_type","text":"spa_get_type() function yields type spatial plateau object given input. instance, pgo object class ppoint (subclass pgeometry), returns \"PLATEAUPOINT\".","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_get_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the type of a spatial plateau object — spa_get_type","text":"","code":"pcomp1 <- create_component(\"MULTIPOINT(1 2, 3 2)\", 0.4) pcomp2 <- create_component(\"POINT(2 1)\", 0.3) ppoint <- create_pgeometry(list(pcomp1, pcomp2), \"PLATEAUPOINT\")  spa_get_type(ppoint)  #> [1] \"PLATEAUPOINT\"  lcomp1 <- create_component(\"LINESTRING(1 2, 3 3, 3 4)\", 1) lcomp2 <- create_component(\"LINESTRING(0 0, 5 5)\", 0.5) pline <- create_pgeometry(list(lcomp1, lcomp2), \"PLATEAULINE\")  spa_get_type(pline) #> [1] \"PLATEAULINE\"  pcomposition <- create_pgeometry(list(ppoint, pline), \"PLATEAUCOMPOSITION\")  spa_get_type(pcomposition) #> [1] \"PLATEAUCOMPOSITION\""},{"path":"https://accarniel.github.io/fsr/reference/spa_is_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a pgeometry object is empty — spa_is_empty","title":"Check if a pgeometry object is empty — spa_is_empty","text":"spa_is_empty() checks whether given pgeometry object empty (.e., contain components).","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_is_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a pgeometry object is empty — spa_is_empty","text":"","code":"spa_is_empty(pgo)"},{"path":"https://accarniel.github.io/fsr/reference/spa_is_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a pgeometry object is empty — spa_is_empty","text":"pgo pgeometry object.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_is_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a pgeometry object is empty — spa_is_empty","text":"Boolean value indicates pgeometry empty.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_is_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a pgeometry object is empty — spa_is_empty","text":"spa_is_empty() function checks pgeometry object component . number components pgeometry object equal 0, returns TRUE. Otherwise, returns FALSE.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_is_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a pgeometry object is empty — spa_is_empty","text":"","code":"# Creating an empty plateau line object  pgo1 <- create_empty_pgeometry(\"PLATEAULINE\")  # Checking if it is empty spa_is_empty(pgo1) #> [1] TRUE  # Adding a component to it and checking if it still empty comp <- create_component(\"LINESTRING(1 1, 2 2, 2 3)\", 0.5) pgo1 <- spa_add_component(pgo1, comp) spa_is_empty(pgo1)   #> [1] FALSE"},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a new classification for fuzzy topological relationships — spa_set_classification","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"spa_set_classification() configures new set linguistic values corresponding membership functions used fuzzy topological relationships.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"","code":"spa_set_classification(classes, mfs)"},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"classes character vector containing linguistic values characterizes different situations fuzzy topological relationships. mfs vector membership functions domain [0, 1].","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"return values, called side effects.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"spa_set_classification() function replaces default linguistic values employed fuzzy topological relationships. membership function parameter mfs represents class parameter classes. length parameters must equal.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions spatial plateau topological relationships fuzzy topological relationships respectively introduced : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018. Carniel, . C.; Schneider, M. Conceptual Model Fuzzy Topological Relationships Fuzzy Regions. Proceedings 2016 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2016), pp. 2271-2278, 2016.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_set_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a new classification for fuzzy topological relationships — spa_set_classification","text":"","code":"if (FALSE) { library(tibble) library(sf)  set.seed(456)  # Generating some random points to create pgeometry objects by using spa_creator() tbl = tibble(x = runif(10, min= 0, max = 30),               y = runif(10, min = 0, max = 30),               z = runif(10, min = 0, max = 50))  # Getting the convex hull on the points to clip plateau region objects during their constructions pts <- st_as_sf(tbl, coords = c(1, 2)) ch <- st_convex_hull(do.call(c, st_geometry(pts)))  pregions <- spa_creator(tbl, base_poly = ch, fuzz_policy = \"fcp\", k = 2)  plot(pregions$pgeometry[[1]]) plot(pregions$pgeometry[[2]])  # Showing results for spa_overlap() by considering default list of classes spa_overlap(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") } # Changing the default classification  trap_mf <- function(a, b, c, d) {   function(x) {     pmax(pmin((x - a)/(b - a), 1, (d - x)/(d - c), na.rm = TRUE), 0)   } }  classes <- c(\"superficially\", \"moderately\", \"completely\") superficially <- trap_mf(0, 0.2, 0.4, 0.6) moderately <- trap_mf(0.4, 0.6, 0.8, 1) completely <- trap_mf(0.6, 0.8, 1, 1)  spa_set_classification(classes, c(superficially, moderately, completely)) if (FALSE) { # Now the fuzzy topological relationships will use the new classification spa_overlap(pregions$pgeometry[[1]], pregions$pgeometry[[2]], ret = \"list\") }"},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the support of a pgeometry object — spa_support","title":"Get the support of a pgeometry object — spa_support","text":"spa_support() yields crisp spatial object (sfg object) corresponds support pgeometry object given input.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the support of a pgeometry object — spa_support","text":"","code":"spa_support(pgo)"},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the support of a pgeometry object — spa_support","text":"pgo pgeometry object type.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the support of a pgeometry object — spa_support","text":"sfg object represents support pgeometry. can empty object, pgeometry empty.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the support of a pgeometry object — spa_support","text":"spa_support() function employs classical definition support fuzzy set theory context Spatial Plateau Algebra. support comprises points membership degree greater equal 1. Hence, spa_support() returns sfg object represents total extent pgeometry given input. pgeometry empty, empty sfg object returned.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get the support of a pgeometry object — spa_support","text":"Carniel, . C.; Venâncio, P. V. . B; Schneider, M. fsr: R package fuzzy spatial data handling. Transactions GIS, vol. 27, . 3, pp. 900-927, 2023. Underlying concepts formal definitions Spatial Plateau Algebra introduced : Carniel, . C.; Schneider, M. Spatial Plateau Algebra: Executable Type System Fuzzy Spatial Data Types. Proceedings 2018 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2018), pp. 1-8, 2018.","code":""},{"path":"https://accarniel.github.io/fsr/reference/spa_support.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the support of a pgeometry object — spa_support","text":"","code":"pcp1 <- create_component(\"POINT(0 0)\", 0.3) pcp2 <- create_component(\"MULTIPOINT((2 2), (2 4), (2 0))\", 0.5) pcp3 <- create_component(\"MULTIPOINT((1 1), (3 1), (1 3), (3 3))\", 0.9) pcp4 <- create_component(\"MULTIPOINT((1 2), (2 1), (3 2))\", 1) pcp5 <- create_component(\"MULTIPOINT((0 0.5), (2 3))\", 0.7) pcp6 <- create_component(\"MULTIPOINT((0 1), (3 3.5))\", 0.85) pcp7 <- create_component(\"MULTIPOINT((1 0), (4 2))\", 0.4)  # Creating a plateau point object ppoint <- create_pgeometry(list(pcp1, pcp2, pcp3, pcp4, pcp5), \"PLATEAUPOINT\") ppoint #> [1] \"PLATEAUPOINT ((POINT (0 0), 0.3), (MULTIPOINT ((2 2), (2 4), (2 0)), 0.5), (MULTIPOINT ((0 0.5), (2 3)), 0.7), (MULTIPOINT ((1 1), (3 1), (1 3), (3 3)), 0.9), (MULTIPOINT ((1 2), (2 1), (3 2)), 1))\"  # Getting its support spa_support(ppoint) #> MULTIPOINT ((0 0), (0 0.5), (1 1), (1 2), (1 3), (2 0), (2 1), (2 2), (2 3), (2 4), (3 1), (3 2), (3 3))  # Getting the support of an empty pgeometry spa_support(create_empty_pgeometry(\"PLATEAUREGION\")) #> MULTIPOLYGON EMPTY"},{"path":"https://accarniel.github.io/fsr/reference/visitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Visitation: An example of FSI model — visitation","title":"Visitation: An example of FSI model — visitation","text":"visitation() provides example, without rules, fuzzy spatial inference (FSI) model.","code":""},{"path":"https://accarniel.github.io/fsr/reference/visitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visitation: An example of FSI model — visitation","text":"","code":"visitation()"},{"path":"https://accarniel.github.io/fsr/reference/visitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visitation: An example of FSI model — visitation","text":"FSI model without fuzzy rules set.","code":""},{"path":"https://accarniel.github.io/fsr/reference/visitation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visitation: An example of FSI model — visitation","text":"visitation() function provides hypothetical FSI model estimates visiting experience based prices overall ratings accommodations well sanitary conditions restaurants. output model infers value 0 100 indicates attractive visit specific location. , experience can classified awful, average, great. linguistic variables linguistic values FSI model listed : accommodation price cut-rate, affordable, expensive linguistic values. accommodation review bad, good, excellent linguistic values. food safety low, medium, high linguistic values, represent levels sanitary conditions. Note just small running example, containing small set points represent locations accommodations restaurants. usage FSI models subdivided preparation phase evaluation phase. preparation phase responsible instantiating new FSI model elements data source component FIFUS. , fsr package provides following functions: fsi_create(), fsi_add_fsa(), fsi_add_cs(). functions employed visitation() users can add fuzzy set rules (using fsi_add_rules()) perform evaluation phase (using functions fsi_eval() /fsi_qw_eval()). sense, visitation() performs following internal actions return FSI model: specify linguistic variables corresponding linguistic values, turn represented membership functions. items specified according context running example. define small point datasets represent linguistic variable. datasets tibble objects. build spatial plateau objects using spa_creator() datasets. result, get spatial plateau objects represent linguistic value. create FSI model fsi_create() function. add fuzzy spatial antecedents fsi_add_fsa(). Recall antecedents spatial plateau objects previously built. define linguistic variable linguistic values membership functions consequent. add consequent FSI model using fsi_add_cs().","code":""},{"path":"https://accarniel.github.io/fsr/reference/visitation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Visitation: An example of FSI model — visitation","text":"function based running example introduced : Carniel, . C.; Galdino, F.; Philippsen, J. S.; Schneider, M. Handling Fuzzy Spatial Data R Using fsr Package. Proceedings 29th International Conference Advances Geographic Information Systems (SIGSPATIAL 2021), pp. 526-535, 2021. Underlying concepts formal definitions FIFUS discussed : Carniel, . C.; Schneider, M. Fuzzy inference fuzzy spatial objects (FIFUS) spatial decision support systems. Proceedings 2017 IEEE International Conference Fuzzy Systems (FUZZ-IEEE 2017), pp. 1-6, 2017.","code":""},{"path":"https://accarniel.github.io/fsr/reference/visitation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visitation: An example of FSI model — visitation","text":"","code":"fsi <- visitation()"},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"fsr-200","dir":"Changelog","previous_headings":"","what":"fsr 2.0.0","title":"fsr 2.0.0","text":"CRAN release: 2023-07-04","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"fsr 2.0.0","text":"Added two new spatial plateau data types: pcollection pcomposition. Redefined class named pgeometry. Defined three spatial plateau data types subclasses pgeometry: ppoint, pline, pregion. Specified validity methods classes according rules Spatial Plateau Algebra. modifications based pull requests performed Pedro V. . B. de Venâncio, added contributor package fsr current version (#26 - @pedbrgs #27 - @pedbrgs). Added spa_get_type() (based pull request #27 - @pedbrgs). Updated improved functions create pgeometry objects: create_pgeometry() create_empty_pgeometry() (#27 - @pedbrgs). Improved creation components redesigning create_component(). component_from_sfg() deprecated (removed next version package). Enhanced fsr_plot() added support pcollection pcomposition objects. Added two new external functions handle pcollection objects: spa_flatten() pcollection_to_pcomposition() (based pull request #31 - @pedbrgs). also used fuzzy geometric set operations pcollection objects. Enhanced fuzzy geometric set operations, can now handle different data types input (based pull request #31 - @pedbrgs). Deprecated spa_common_points() - use spa_intersection() get common points two plateau line objects. Deprecated spa_boundary_pregion() - use spa_boundary get boundary spatial plateau object. Enhanced general operations (e.g., spa_core(), spa_boundary()) deal new spatial plateau data types (based pull request #31 - @pedbrgs). Added three new general operations: spa_alpha_cut(), spa_strict_alpha_cut(), spa_range(). Removed dependency packages FuzzyR utils.","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"minor-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"fsr 2.0.0","text":"Better organization source code creating R scripts rearranging functions classes . Updated format.pgeometry() include parameter determines maximum number characters shown. Updated spa_pwkt() deal new classes (based pull request #26 - @pedbrgs). Updated spa_is_empty() deal new classes (based pull request #26 - @pedbrgs). Updated as_tibble() deal new classes. Extended fuzzy numerical operations deal new classes (based pull request #30 - @pedbrgs). Updated fuzzy topological relationships due changes operators (based pull request #31 - @pedbrgs). Minor changes functions construction module use improved operations manipulating spatial plateau objects.","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"change-in-the-list-of-authors-2-0-0","dir":"Changelog","previous_headings":"","what":"Change in the list of authors","title":"fsr 2.0.0","text":"Added Pedro Vinícius Almeida Borges de Venâncio (@pedbrgs) contributor fsr. grateful contributions Felippe Galdino (@ocfgaldino) Juliana Strieder Philippsen (@JulianaStrieder) first version package (1.0.0, 1.0.1, 1.0.2). participation package concluded; thus, removed list authors version package, includes several changes, improvements, new methods.","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"fsr-102","dir":"Changelog","previous_headings":"","what":"fsr 1.0.2","title":"fsr 1.0.2","text":"CRAN release: 2022-07-05","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"minor-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"fsr 1.0.2","text":"Added parameter d_tolerance spa_creator() function. parameter employed package sf computing Voronoi diagram Delaunay triangulation corresponding construction policies.","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fsr 1.0.2","text":"Fixed fuzzy numerical operations dealing empty objects. Fixed spa_core() return empty crisp spatial object input core. Fixed statements calculations fuzzy topological relationships. Fixed clipping operation spa_creator() using construction policies based Voronoi diagram Delaunay triangulation.","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"fsr-101","dir":"Changelog","previous_headings":"","what":"fsr 1.0.1","title":"fsr 1.0.1","text":"CRAN release: 2022-01-25","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"major-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"fsr 1.0.1","text":"Added new construction policy spa_creator() function based convex hull (improved implementation issue #29).","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"minor-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"fsr 1.0.1","text":"Added publication describes fsr package CITATION. Added optional parameter spa_creator() named digits (improved update based pull request #28 - @leticiabohnert).","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"fsr 1.0.1","text":"Fixed spa_add_component() checking specific condition. Fixed management CRS plotting spatial plateau objects (fsr_plot()). Fixed management geometry collections resulting geometric computations spatial plateau geometric set operations.","code":""},{"path":"https://accarniel.github.io/fsr/news/index.html","id":"fsr-100","dir":"Changelog","previous_headings":"","what":"fsr 1.0.0","title":"fsr 1.0.0","text":"CRAN release: 2021-09-16 Fuzzy Spatial Inference Module (e.g., functions create fuzzy spatial inference model functions evaluate ). Fuzzy Spatial Data Handling Module (e.g., fuzzy numerical operations, fuzzy geometric set operations, fuzzy topological predicates). Construction Module (e.g., spa_creator()). Basic Module (e.g., S4 classes basic functions).","code":""}]
